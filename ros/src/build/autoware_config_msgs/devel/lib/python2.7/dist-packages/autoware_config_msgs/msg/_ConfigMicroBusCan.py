# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_config_msgs/ConfigMicroBusCan.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ConfigMicroBusCan(genpy.Message):
  _md5sum = "26c6999f9bd3f4e18f1576c259a99941"
  _type = "autoware_config_msgs/ConfigMicroBusCan"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
bool use_position_checker
float64 velocity_limit
float64 velocity_stop_th
float64 accel_max_i
float64 brake_max_i
float64 k_accel_p_velocity
float64 k_accel_i_velocity
float64 k_accel_d_velocity
float64 k_brake_p_velocity
float64 k_brake_i_velocity
float64 k_brake_d_velocity
float64 k_accel_p_acceleration
float64 k_accel_i_acceleration
float64 k_accel_d_acceleration
float64 k_brake_p_acceleration
float64 k_brake_i_acceleration
float64 k_brake_d_acceleration
float64 k_accel_p_distance
float64 k_accel_i_distance
float64 k_accel_d_distance
float64 k_brake_p_distance
float64 k_brake_i_distance
float64 k_brake_d_distance
float64 steer_max_i
float64 k_steer_p_distance
float64 k_steer_i_distance
float64 k_steer_d_distance
int16 pedal_stroke_center
int16 pedal_stroke_max
int16 pedal_stroke_min
int16 brake_stroke_stopping_med
int16 accel_stroke_offset
int16 brake_stroke_offset
float64 gnss_lat_limit
float64 gnss_lon_limit
float64 gnss_alt_limit
float64 acceptable_velocity_variation
float64 difference_to_waypoint_distance
float64 difference_to_waypoint_angular

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','use_position_checker','velocity_limit','velocity_stop_th','accel_max_i','brake_max_i','k_accel_p_velocity','k_accel_i_velocity','k_accel_d_velocity','k_brake_p_velocity','k_brake_i_velocity','k_brake_d_velocity','k_accel_p_acceleration','k_accel_i_acceleration','k_accel_d_acceleration','k_brake_p_acceleration','k_brake_i_acceleration','k_brake_d_acceleration','k_accel_p_distance','k_accel_i_distance','k_accel_d_distance','k_brake_p_distance','k_brake_i_distance','k_brake_d_distance','steer_max_i','k_steer_p_distance','k_steer_i_distance','k_steer_d_distance','pedal_stroke_center','pedal_stroke_max','pedal_stroke_min','brake_stroke_stopping_med','accel_stroke_offset','brake_stroke_offset','gnss_lat_limit','gnss_lon_limit','gnss_alt_limit','acceptable_velocity_variation','difference_to_waypoint_distance','difference_to_waypoint_angular']
  _slot_types = ['std_msgs/Header','bool','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int16','int16','int16','int16','int16','int16','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,use_position_checker,velocity_limit,velocity_stop_th,accel_max_i,brake_max_i,k_accel_p_velocity,k_accel_i_velocity,k_accel_d_velocity,k_brake_p_velocity,k_brake_i_velocity,k_brake_d_velocity,k_accel_p_acceleration,k_accel_i_acceleration,k_accel_d_acceleration,k_brake_p_acceleration,k_brake_i_acceleration,k_brake_d_acceleration,k_accel_p_distance,k_accel_i_distance,k_accel_d_distance,k_brake_p_distance,k_brake_i_distance,k_brake_d_distance,steer_max_i,k_steer_p_distance,k_steer_i_distance,k_steer_d_distance,pedal_stroke_center,pedal_stroke_max,pedal_stroke_min,brake_stroke_stopping_med,accel_stroke_offset,brake_stroke_offset,gnss_lat_limit,gnss_lon_limit,gnss_alt_limit,acceptable_velocity_variation,difference_to_waypoint_distance,difference_to_waypoint_angular

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConfigMicroBusCan, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.use_position_checker is None:
        self.use_position_checker = False
      if self.velocity_limit is None:
        self.velocity_limit = 0.
      if self.velocity_stop_th is None:
        self.velocity_stop_th = 0.
      if self.accel_max_i is None:
        self.accel_max_i = 0.
      if self.brake_max_i is None:
        self.brake_max_i = 0.
      if self.k_accel_p_velocity is None:
        self.k_accel_p_velocity = 0.
      if self.k_accel_i_velocity is None:
        self.k_accel_i_velocity = 0.
      if self.k_accel_d_velocity is None:
        self.k_accel_d_velocity = 0.
      if self.k_brake_p_velocity is None:
        self.k_brake_p_velocity = 0.
      if self.k_brake_i_velocity is None:
        self.k_brake_i_velocity = 0.
      if self.k_brake_d_velocity is None:
        self.k_brake_d_velocity = 0.
      if self.k_accel_p_acceleration is None:
        self.k_accel_p_acceleration = 0.
      if self.k_accel_i_acceleration is None:
        self.k_accel_i_acceleration = 0.
      if self.k_accel_d_acceleration is None:
        self.k_accel_d_acceleration = 0.
      if self.k_brake_p_acceleration is None:
        self.k_brake_p_acceleration = 0.
      if self.k_brake_i_acceleration is None:
        self.k_brake_i_acceleration = 0.
      if self.k_brake_d_acceleration is None:
        self.k_brake_d_acceleration = 0.
      if self.k_accel_p_distance is None:
        self.k_accel_p_distance = 0.
      if self.k_accel_i_distance is None:
        self.k_accel_i_distance = 0.
      if self.k_accel_d_distance is None:
        self.k_accel_d_distance = 0.
      if self.k_brake_p_distance is None:
        self.k_brake_p_distance = 0.
      if self.k_brake_i_distance is None:
        self.k_brake_i_distance = 0.
      if self.k_brake_d_distance is None:
        self.k_brake_d_distance = 0.
      if self.steer_max_i is None:
        self.steer_max_i = 0.
      if self.k_steer_p_distance is None:
        self.k_steer_p_distance = 0.
      if self.k_steer_i_distance is None:
        self.k_steer_i_distance = 0.
      if self.k_steer_d_distance is None:
        self.k_steer_d_distance = 0.
      if self.pedal_stroke_center is None:
        self.pedal_stroke_center = 0
      if self.pedal_stroke_max is None:
        self.pedal_stroke_max = 0
      if self.pedal_stroke_min is None:
        self.pedal_stroke_min = 0
      if self.brake_stroke_stopping_med is None:
        self.brake_stroke_stopping_med = 0
      if self.accel_stroke_offset is None:
        self.accel_stroke_offset = 0
      if self.brake_stroke_offset is None:
        self.brake_stroke_offset = 0
      if self.gnss_lat_limit is None:
        self.gnss_lat_limit = 0.
      if self.gnss_lon_limit is None:
        self.gnss_lon_limit = 0.
      if self.gnss_alt_limit is None:
        self.gnss_alt_limit = 0.
      if self.acceptable_velocity_variation is None:
        self.acceptable_velocity_variation = 0.
      if self.difference_to_waypoint_distance is None:
        self.difference_to_waypoint_distance = 0.
      if self.difference_to_waypoint_angular is None:
        self.difference_to_waypoint_angular = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.use_position_checker = False
      self.velocity_limit = 0.
      self.velocity_stop_th = 0.
      self.accel_max_i = 0.
      self.brake_max_i = 0.
      self.k_accel_p_velocity = 0.
      self.k_accel_i_velocity = 0.
      self.k_accel_d_velocity = 0.
      self.k_brake_p_velocity = 0.
      self.k_brake_i_velocity = 0.
      self.k_brake_d_velocity = 0.
      self.k_accel_p_acceleration = 0.
      self.k_accel_i_acceleration = 0.
      self.k_accel_d_acceleration = 0.
      self.k_brake_p_acceleration = 0.
      self.k_brake_i_acceleration = 0.
      self.k_brake_d_acceleration = 0.
      self.k_accel_p_distance = 0.
      self.k_accel_i_distance = 0.
      self.k_accel_d_distance = 0.
      self.k_brake_p_distance = 0.
      self.k_brake_i_distance = 0.
      self.k_brake_d_distance = 0.
      self.steer_max_i = 0.
      self.k_steer_p_distance = 0.
      self.k_steer_i_distance = 0.
      self.k_steer_d_distance = 0.
      self.pedal_stroke_center = 0
      self.pedal_stroke_max = 0
      self.pedal_stroke_min = 0
      self.brake_stroke_stopping_med = 0
      self.accel_stroke_offset = 0
      self.brake_stroke_offset = 0
      self.gnss_lat_limit = 0.
      self.gnss_lon_limit = 0.
      self.gnss_alt_limit = 0.
      self.acceptable_velocity_variation = 0.
      self.difference_to_waypoint_distance = 0.
      self.difference_to_waypoint_angular = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B26d6h6d().pack(_x.use_position_checker, _x.velocity_limit, _x.velocity_stop_th, _x.accel_max_i, _x.brake_max_i, _x.k_accel_p_velocity, _x.k_accel_i_velocity, _x.k_accel_d_velocity, _x.k_brake_p_velocity, _x.k_brake_i_velocity, _x.k_brake_d_velocity, _x.k_accel_p_acceleration, _x.k_accel_i_acceleration, _x.k_accel_d_acceleration, _x.k_brake_p_acceleration, _x.k_brake_i_acceleration, _x.k_brake_d_acceleration, _x.k_accel_p_distance, _x.k_accel_i_distance, _x.k_accel_d_distance, _x.k_brake_p_distance, _x.k_brake_i_distance, _x.k_brake_d_distance, _x.steer_max_i, _x.k_steer_p_distance, _x.k_steer_i_distance, _x.k_steer_d_distance, _x.pedal_stroke_center, _x.pedal_stroke_max, _x.pedal_stroke_min, _x.brake_stroke_stopping_med, _x.accel_stroke_offset, _x.brake_stroke_offset, _x.gnss_lat_limit, _x.gnss_lon_limit, _x.gnss_alt_limit, _x.acceptable_velocity_variation, _x.difference_to_waypoint_distance, _x.difference_to_waypoint_angular))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 269
      (_x.use_position_checker, _x.velocity_limit, _x.velocity_stop_th, _x.accel_max_i, _x.brake_max_i, _x.k_accel_p_velocity, _x.k_accel_i_velocity, _x.k_accel_d_velocity, _x.k_brake_p_velocity, _x.k_brake_i_velocity, _x.k_brake_d_velocity, _x.k_accel_p_acceleration, _x.k_accel_i_acceleration, _x.k_accel_d_acceleration, _x.k_brake_p_acceleration, _x.k_brake_i_acceleration, _x.k_brake_d_acceleration, _x.k_accel_p_distance, _x.k_accel_i_distance, _x.k_accel_d_distance, _x.k_brake_p_distance, _x.k_brake_i_distance, _x.k_brake_d_distance, _x.steer_max_i, _x.k_steer_p_distance, _x.k_steer_i_distance, _x.k_steer_d_distance, _x.pedal_stroke_center, _x.pedal_stroke_max, _x.pedal_stroke_min, _x.brake_stroke_stopping_med, _x.accel_stroke_offset, _x.brake_stroke_offset, _x.gnss_lat_limit, _x.gnss_lon_limit, _x.gnss_alt_limit, _x.acceptable_velocity_variation, _x.difference_to_waypoint_distance, _x.difference_to_waypoint_angular,) = _get_struct_B26d6h6d().unpack(str[start:end])
      self.use_position_checker = bool(self.use_position_checker)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B26d6h6d().pack(_x.use_position_checker, _x.velocity_limit, _x.velocity_stop_th, _x.accel_max_i, _x.brake_max_i, _x.k_accel_p_velocity, _x.k_accel_i_velocity, _x.k_accel_d_velocity, _x.k_brake_p_velocity, _x.k_brake_i_velocity, _x.k_brake_d_velocity, _x.k_accel_p_acceleration, _x.k_accel_i_acceleration, _x.k_accel_d_acceleration, _x.k_brake_p_acceleration, _x.k_brake_i_acceleration, _x.k_brake_d_acceleration, _x.k_accel_p_distance, _x.k_accel_i_distance, _x.k_accel_d_distance, _x.k_brake_p_distance, _x.k_brake_i_distance, _x.k_brake_d_distance, _x.steer_max_i, _x.k_steer_p_distance, _x.k_steer_i_distance, _x.k_steer_d_distance, _x.pedal_stroke_center, _x.pedal_stroke_max, _x.pedal_stroke_min, _x.brake_stroke_stopping_med, _x.accel_stroke_offset, _x.brake_stroke_offset, _x.gnss_lat_limit, _x.gnss_lon_limit, _x.gnss_alt_limit, _x.acceptable_velocity_variation, _x.difference_to_waypoint_distance, _x.difference_to_waypoint_angular))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 269
      (_x.use_position_checker, _x.velocity_limit, _x.velocity_stop_th, _x.accel_max_i, _x.brake_max_i, _x.k_accel_p_velocity, _x.k_accel_i_velocity, _x.k_accel_d_velocity, _x.k_brake_p_velocity, _x.k_brake_i_velocity, _x.k_brake_d_velocity, _x.k_accel_p_acceleration, _x.k_accel_i_acceleration, _x.k_accel_d_acceleration, _x.k_brake_p_acceleration, _x.k_brake_i_acceleration, _x.k_brake_d_acceleration, _x.k_accel_p_distance, _x.k_accel_i_distance, _x.k_accel_d_distance, _x.k_brake_p_distance, _x.k_brake_i_distance, _x.k_brake_d_distance, _x.steer_max_i, _x.k_steer_p_distance, _x.k_steer_i_distance, _x.k_steer_d_distance, _x.pedal_stroke_center, _x.pedal_stroke_max, _x.pedal_stroke_min, _x.brake_stroke_stopping_med, _x.accel_stroke_offset, _x.brake_stroke_offset, _x.gnss_lat_limit, _x.gnss_lon_limit, _x.gnss_alt_limit, _x.acceptable_velocity_variation, _x.difference_to_waypoint_distance, _x.difference_to_waypoint_angular,) = _get_struct_B26d6h6d().unpack(str[start:end])
      self.use_position_checker = bool(self.use_position_checker)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B26d6h6d = None
def _get_struct_B26d6h6d():
    global _struct_B26d6h6d
    if _struct_B26d6h6d is None:
        _struct_B26d6h6d = struct.Struct("<B26d6h6d")
    return _struct_B26d6h6d
