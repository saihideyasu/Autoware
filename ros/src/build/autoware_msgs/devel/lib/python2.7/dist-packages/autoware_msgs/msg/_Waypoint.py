# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_msgs/Waypoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import autoware_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class Waypoint(genpy.Message):
  _md5sum = "341d2d62ef3b96657a4679c92dc89f5e"
  _type = "autoware_msgs/Waypoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# global id
int32 gid 
# local id
int32 lid
geometry_msgs/PoseStamped pose
geometry_msgs/TwistStamped twist
DTLane dtlane
int32 change_flag
WaypointState wpstate

uint32 lane_id
uint32 left_lane_id
uint32 right_lane_id
uint32 stop_line_id
float32 cost
float32 time_cost

# Lane Direction
# FORWARD				= 0
# FORWARD_LEFT	 		= 1
# FORWARD_RIGHT			= 2
# BACKWARD				= 3 
# BACKWARD_LEFT			= 4
# BACKWARD_RIGHT		= 5
# STANDSTILL	 		= 6
uint32 direction

WaypointParam waypoint_param

ExtractedPosition[] signals

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: autoware_msgs/DTLane
float64 dist
float64 dir
float64 apara
float64 r
float64 slope
float64 cant
float64 lw
float64 rw

================================================================================
MSG: autoware_msgs/WaypointState
int32 aid
uint8 NULLSTATE=0

# lanechange
uint8 lanechange_state

# bilinker
uint8 steering_state
uint8 STR_LEFT=1
uint8 STR_RIGHT=2
uint8 STR_STRAIGHT=3
uint8 STR_BACK=4

uint8 accel_state

uint8 stop_state
# 1 is stopline, 2 is stop which can only be released manually.
uint8 TYPE_STOPLINE=1
uint8 TYPE_STOP=2

uint8 event_state
uint8 TYPE_EVENT_NULL = 0
uint8 TYPE_EVENT_GOAL = 1
uint8 TYPE_EVENT_MIDDLE_GOAL = 2
uint8 TYPE_EVENT_POSITION_STOP = 3
uint8 TYPE_EVENT_BUS_STOP = 4
uint8 TYPE_EVENT_PARKING = 5

================================================================================
MSG: autoware_msgs/WaypointParam
Header header
uint32 id
float32 weight
int32 blinker
int32 feat_proj_x
int32 feat_proj_y
int32 velocity_KPPlus
int32 velocity_KPMinus
int32 velocity_punchPlus
int32 velocity_punchMinus
int32 velocity_windowPlus
int32 velocity_windowMinus
float64 drive_stroke
float64 brake_stroke
int16 mb_pedal
int32 pause
int32 pauseGroup
float32 vgf_leafsize
float32 vgf_measurement_range
ExtractedPosition[] signals
int32 curve_flag
int16 microbus_pedal
int16 microbus_angle
int8 automatic_door
int8 signal_stop_line
int8 temporary_stop_line
int8 fusion_select
float64 steer_correction
float32 lookahead_ratio
float32 minimum_lookahead_distance
float32 lookahead_ratio_magn
LiesseXZB70MParam liesse

================================================================================
MSG: autoware_msgs/ExtractedPosition
# This message defines the information required to describe a lamp (bulb)
# in a traffic signal, according to the information extracted from the ADAS Map
# and the extrinsic camera calibration

int32 signalId  # Traffic Signal Lamp ID
int32 u         # Lamp ROI x in image coords
int32 v         # Lamp ROI y in image coords
int32 radius    # Lamp Radius
float64 x       # X position in map coordinates
float64 y       # Y position in map coordinates
float64 z       # Z position in map coordinates
float64 hang    # Azimuth "Horizontal Angle"
int8 type       # Lamp Type (red, yellow, green, ...)
int32 linkId    # Closest LinkID (lane) in VectorMap
int32 plId      # PoleID to which this Lamp belongs to

================================================================================
MSG: autoware_msgs/LiesseXZB70MParam
Header header
int8 SHIFT_P = 0
int8 SHIFT_R = 1
int8 SHIFT_N = 2
int8 SHIFT_D = 3
int8 SHIFT_4 = 4
int8 SHIFT_L = 5
int8 shift
"""
  __slots__ = ['gid','lid','pose','twist','dtlane','change_flag','wpstate','lane_id','left_lane_id','right_lane_id','stop_line_id','cost','time_cost','direction','waypoint_param','signals']
  _slot_types = ['int32','int32','geometry_msgs/PoseStamped','geometry_msgs/TwistStamped','autoware_msgs/DTLane','int32','autoware_msgs/WaypointState','uint32','uint32','uint32','uint32','float32','float32','uint32','autoware_msgs/WaypointParam','autoware_msgs/ExtractedPosition[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gid,lid,pose,twist,dtlane,change_flag,wpstate,lane_id,left_lane_id,right_lane_id,stop_line_id,cost,time_cost,direction,waypoint_param,signals

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Waypoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gid is None:
        self.gid = 0
      if self.lid is None:
        self.lid = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.twist is None:
        self.twist = geometry_msgs.msg.TwistStamped()
      if self.dtlane is None:
        self.dtlane = autoware_msgs.msg.DTLane()
      if self.change_flag is None:
        self.change_flag = 0
      if self.wpstate is None:
        self.wpstate = autoware_msgs.msg.WaypointState()
      if self.lane_id is None:
        self.lane_id = 0
      if self.left_lane_id is None:
        self.left_lane_id = 0
      if self.right_lane_id is None:
        self.right_lane_id = 0
      if self.stop_line_id is None:
        self.stop_line_id = 0
      if self.cost is None:
        self.cost = 0.
      if self.time_cost is None:
        self.time_cost = 0.
      if self.direction is None:
        self.direction = 0
      if self.waypoint_param is None:
        self.waypoint_param = autoware_msgs.msg.WaypointParam()
      if self.signals is None:
        self.signals = []
    else:
      self.gid = 0
      self.lid = 0
      self.pose = geometry_msgs.msg.PoseStamped()
      self.twist = geometry_msgs.msg.TwistStamped()
      self.dtlane = autoware_msgs.msg.DTLane()
      self.change_flag = 0
      self.wpstate = autoware_msgs.msg.WaypointState()
      self.lane_id = 0
      self.left_lane_id = 0
      self.right_lane_id = 0
      self.stop_line_id = 0
      self.cost = 0.
      self.time_cost = 0.
      self.direction = 0
      self.waypoint_param = autoware_msgs.msg.WaypointParam()
      self.signals = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i3I().pack(_x.gid, _x.lid, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs))
      _x = self.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.twist.header.seq, _x.twist.header.stamp.secs, _x.twist.header.stamp.nsecs))
      _x = self.twist.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_14d2i5B4I2f4I().pack(_x.twist.twist.linear.x, _x.twist.twist.linear.y, _x.twist.twist.linear.z, _x.twist.twist.angular.x, _x.twist.twist.angular.y, _x.twist.twist.angular.z, _x.dtlane.dist, _x.dtlane.dir, _x.dtlane.apara, _x.dtlane.r, _x.dtlane.slope, _x.dtlane.cant, _x.dtlane.lw, _x.dtlane.rw, _x.change_flag, _x.wpstate.aid, _x.wpstate.lanechange_state, _x.wpstate.steering_state, _x.wpstate.accel_state, _x.wpstate.stop_state, _x.wpstate.event_state, _x.lane_id, _x.left_lane_id, _x.right_lane_id, _x.stop_line_id, _x.cost, _x.time_cost, _x.direction, _x.waypoint_param.header.seq, _x.waypoint_param.header.stamp.secs, _x.waypoint_param.header.stamp.nsecs))
      _x = self.waypoint_param.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_If9i2dh2i2f().pack(_x.waypoint_param.id, _x.waypoint_param.weight, _x.waypoint_param.blinker, _x.waypoint_param.feat_proj_x, _x.waypoint_param.feat_proj_y, _x.waypoint_param.velocity_KPPlus, _x.waypoint_param.velocity_KPMinus, _x.waypoint_param.velocity_punchPlus, _x.waypoint_param.velocity_punchMinus, _x.waypoint_param.velocity_windowPlus, _x.waypoint_param.velocity_windowMinus, _x.waypoint_param.drive_stroke, _x.waypoint_param.brake_stroke, _x.waypoint_param.mb_pedal, _x.waypoint_param.pause, _x.waypoint_param.pauseGroup, _x.waypoint_param.vgf_leafsize, _x.waypoint_param.vgf_measurement_range))
      length = len(self.waypoint_param.signals)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoint_param.signals:
        _x = val1
        buff.write(_get_struct_4i4db2i().pack(_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId))
      _x = self
      buff.write(_get_struct_i2h4bd3f3I().pack(_x.waypoint_param.curve_flag, _x.waypoint_param.microbus_pedal, _x.waypoint_param.microbus_angle, _x.waypoint_param.automatic_door, _x.waypoint_param.signal_stop_line, _x.waypoint_param.temporary_stop_line, _x.waypoint_param.fusion_select, _x.waypoint_param.steer_correction, _x.waypoint_param.lookahead_ratio, _x.waypoint_param.minimum_lookahead_distance, _x.waypoint_param.lookahead_ratio_magn, _x.waypoint_param.liesse.header.seq, _x.waypoint_param.liesse.header.stamp.secs, _x.waypoint_param.liesse.header.stamp.nsecs))
      _x = self.waypoint_param.liesse.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.waypoint_param.liesse.shift))
      length = len(self.signals)
      buff.write(_struct_I.pack(length))
      for val1 in self.signals:
        _x = val1
        buff.write(_get_struct_4i4db2i().pack(_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.twist is None:
        self.twist = geometry_msgs.msg.TwistStamped()
      if self.dtlane is None:
        self.dtlane = autoware_msgs.msg.DTLane()
      if self.wpstate is None:
        self.wpstate = autoware_msgs.msg.WaypointState()
      if self.waypoint_param is None:
        self.waypoint_param = autoware_msgs.msg.WaypointParam()
      if self.signals is None:
        self.signals = None
      end = 0
      _x = self
      start = end
      end += 20
      (_x.gid, _x.lid, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs,) = _get_struct_2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.twist.header.seq, _x.twist.header.stamp.secs, _x.twist.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.twist.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.twist.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 165
      (_x.twist.twist.linear.x, _x.twist.twist.linear.y, _x.twist.twist.linear.z, _x.twist.twist.angular.x, _x.twist.twist.angular.y, _x.twist.twist.angular.z, _x.dtlane.dist, _x.dtlane.dir, _x.dtlane.apara, _x.dtlane.r, _x.dtlane.slope, _x.dtlane.cant, _x.dtlane.lw, _x.dtlane.rw, _x.change_flag, _x.wpstate.aid, _x.wpstate.lanechange_state, _x.wpstate.steering_state, _x.wpstate.accel_state, _x.wpstate.stop_state, _x.wpstate.event_state, _x.lane_id, _x.left_lane_id, _x.right_lane_id, _x.stop_line_id, _x.cost, _x.time_cost, _x.direction, _x.waypoint_param.header.seq, _x.waypoint_param.header.stamp.secs, _x.waypoint_param.header.stamp.nsecs,) = _get_struct_14d2i5B4I2f4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.waypoint_param.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.waypoint_param.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 78
      (_x.waypoint_param.id, _x.waypoint_param.weight, _x.waypoint_param.blinker, _x.waypoint_param.feat_proj_x, _x.waypoint_param.feat_proj_y, _x.waypoint_param.velocity_KPPlus, _x.waypoint_param.velocity_KPMinus, _x.waypoint_param.velocity_punchPlus, _x.waypoint_param.velocity_punchMinus, _x.waypoint_param.velocity_windowPlus, _x.waypoint_param.velocity_windowMinus, _x.waypoint_param.drive_stroke, _x.waypoint_param.brake_stroke, _x.waypoint_param.mb_pedal, _x.waypoint_param.pause, _x.waypoint_param.pauseGroup, _x.waypoint_param.vgf_leafsize, _x.waypoint_param.vgf_measurement_range,) = _get_struct_If9i2dh2i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoint_param.signals = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.ExtractedPosition()
        _x = val1
        start = end
        end += 57
        (_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId,) = _get_struct_4i4db2i().unpack(str[start:end])
        self.waypoint_param.signals.append(val1)
      _x = self
      start = end
      end += 44
      (_x.waypoint_param.curve_flag, _x.waypoint_param.microbus_pedal, _x.waypoint_param.microbus_angle, _x.waypoint_param.automatic_door, _x.waypoint_param.signal_stop_line, _x.waypoint_param.temporary_stop_line, _x.waypoint_param.fusion_select, _x.waypoint_param.steer_correction, _x.waypoint_param.lookahead_ratio, _x.waypoint_param.minimum_lookahead_distance, _x.waypoint_param.lookahead_ratio_magn, _x.waypoint_param.liesse.header.seq, _x.waypoint_param.liesse.header.stamp.secs, _x.waypoint_param.liesse.header.stamp.nsecs,) = _get_struct_i2h4bd3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.waypoint_param.liesse.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.waypoint_param.liesse.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.waypoint_param.liesse.shift,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.signals = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.ExtractedPosition()
        _x = val1
        start = end
        end += 57
        (_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId,) = _get_struct_4i4db2i().unpack(str[start:end])
        self.signals.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i3I().pack(_x.gid, _x.lid, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs))
      _x = self.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.twist.header.seq, _x.twist.header.stamp.secs, _x.twist.header.stamp.nsecs))
      _x = self.twist.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_14d2i5B4I2f4I().pack(_x.twist.twist.linear.x, _x.twist.twist.linear.y, _x.twist.twist.linear.z, _x.twist.twist.angular.x, _x.twist.twist.angular.y, _x.twist.twist.angular.z, _x.dtlane.dist, _x.dtlane.dir, _x.dtlane.apara, _x.dtlane.r, _x.dtlane.slope, _x.dtlane.cant, _x.dtlane.lw, _x.dtlane.rw, _x.change_flag, _x.wpstate.aid, _x.wpstate.lanechange_state, _x.wpstate.steering_state, _x.wpstate.accel_state, _x.wpstate.stop_state, _x.wpstate.event_state, _x.lane_id, _x.left_lane_id, _x.right_lane_id, _x.stop_line_id, _x.cost, _x.time_cost, _x.direction, _x.waypoint_param.header.seq, _x.waypoint_param.header.stamp.secs, _x.waypoint_param.header.stamp.nsecs))
      _x = self.waypoint_param.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_If9i2dh2i2f().pack(_x.waypoint_param.id, _x.waypoint_param.weight, _x.waypoint_param.blinker, _x.waypoint_param.feat_proj_x, _x.waypoint_param.feat_proj_y, _x.waypoint_param.velocity_KPPlus, _x.waypoint_param.velocity_KPMinus, _x.waypoint_param.velocity_punchPlus, _x.waypoint_param.velocity_punchMinus, _x.waypoint_param.velocity_windowPlus, _x.waypoint_param.velocity_windowMinus, _x.waypoint_param.drive_stroke, _x.waypoint_param.brake_stroke, _x.waypoint_param.mb_pedal, _x.waypoint_param.pause, _x.waypoint_param.pauseGroup, _x.waypoint_param.vgf_leafsize, _x.waypoint_param.vgf_measurement_range))
      length = len(self.waypoint_param.signals)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoint_param.signals:
        _x = val1
        buff.write(_get_struct_4i4db2i().pack(_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId))
      _x = self
      buff.write(_get_struct_i2h4bd3f3I().pack(_x.waypoint_param.curve_flag, _x.waypoint_param.microbus_pedal, _x.waypoint_param.microbus_angle, _x.waypoint_param.automatic_door, _x.waypoint_param.signal_stop_line, _x.waypoint_param.temporary_stop_line, _x.waypoint_param.fusion_select, _x.waypoint_param.steer_correction, _x.waypoint_param.lookahead_ratio, _x.waypoint_param.minimum_lookahead_distance, _x.waypoint_param.lookahead_ratio_magn, _x.waypoint_param.liesse.header.seq, _x.waypoint_param.liesse.header.stamp.secs, _x.waypoint_param.liesse.header.stamp.nsecs))
      _x = self.waypoint_param.liesse.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.waypoint_param.liesse.shift))
      length = len(self.signals)
      buff.write(_struct_I.pack(length))
      for val1 in self.signals:
        _x = val1
        buff.write(_get_struct_4i4db2i().pack(_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.twist is None:
        self.twist = geometry_msgs.msg.TwistStamped()
      if self.dtlane is None:
        self.dtlane = autoware_msgs.msg.DTLane()
      if self.wpstate is None:
        self.wpstate = autoware_msgs.msg.WaypointState()
      if self.waypoint_param is None:
        self.waypoint_param = autoware_msgs.msg.WaypointParam()
      if self.signals is None:
        self.signals = None
      end = 0
      _x = self
      start = end
      end += 20
      (_x.gid, _x.lid, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs,) = _get_struct_2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.twist.header.seq, _x.twist.header.stamp.secs, _x.twist.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.twist.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.twist.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 165
      (_x.twist.twist.linear.x, _x.twist.twist.linear.y, _x.twist.twist.linear.z, _x.twist.twist.angular.x, _x.twist.twist.angular.y, _x.twist.twist.angular.z, _x.dtlane.dist, _x.dtlane.dir, _x.dtlane.apara, _x.dtlane.r, _x.dtlane.slope, _x.dtlane.cant, _x.dtlane.lw, _x.dtlane.rw, _x.change_flag, _x.wpstate.aid, _x.wpstate.lanechange_state, _x.wpstate.steering_state, _x.wpstate.accel_state, _x.wpstate.stop_state, _x.wpstate.event_state, _x.lane_id, _x.left_lane_id, _x.right_lane_id, _x.stop_line_id, _x.cost, _x.time_cost, _x.direction, _x.waypoint_param.header.seq, _x.waypoint_param.header.stamp.secs, _x.waypoint_param.header.stamp.nsecs,) = _get_struct_14d2i5B4I2f4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.waypoint_param.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.waypoint_param.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 78
      (_x.waypoint_param.id, _x.waypoint_param.weight, _x.waypoint_param.blinker, _x.waypoint_param.feat_proj_x, _x.waypoint_param.feat_proj_y, _x.waypoint_param.velocity_KPPlus, _x.waypoint_param.velocity_KPMinus, _x.waypoint_param.velocity_punchPlus, _x.waypoint_param.velocity_punchMinus, _x.waypoint_param.velocity_windowPlus, _x.waypoint_param.velocity_windowMinus, _x.waypoint_param.drive_stroke, _x.waypoint_param.brake_stroke, _x.waypoint_param.mb_pedal, _x.waypoint_param.pause, _x.waypoint_param.pauseGroup, _x.waypoint_param.vgf_leafsize, _x.waypoint_param.vgf_measurement_range,) = _get_struct_If9i2dh2i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoint_param.signals = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.ExtractedPosition()
        _x = val1
        start = end
        end += 57
        (_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId,) = _get_struct_4i4db2i().unpack(str[start:end])
        self.waypoint_param.signals.append(val1)
      _x = self
      start = end
      end += 44
      (_x.waypoint_param.curve_flag, _x.waypoint_param.microbus_pedal, _x.waypoint_param.microbus_angle, _x.waypoint_param.automatic_door, _x.waypoint_param.signal_stop_line, _x.waypoint_param.temporary_stop_line, _x.waypoint_param.fusion_select, _x.waypoint_param.steer_correction, _x.waypoint_param.lookahead_ratio, _x.waypoint_param.minimum_lookahead_distance, _x.waypoint_param.lookahead_ratio_magn, _x.waypoint_param.liesse.header.seq, _x.waypoint_param.liesse.header.stamp.secs, _x.waypoint_param.liesse.header.stamp.nsecs,) = _get_struct_i2h4bd3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.waypoint_param.liesse.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.waypoint_param.liesse.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.waypoint_param.liesse.shift,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.signals = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.ExtractedPosition()
        _x = val1
        start = end
        end += 57
        (_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId,) = _get_struct_4i4db2i().unpack(str[start:end])
        self.signals.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_2i3I = None
def _get_struct_2i3I():
    global _struct_2i3I
    if _struct_2i3I is None:
        _struct_2i3I = struct.Struct("<2i3I")
    return _struct_2i3I
_struct_i2h4bd3f3I = None
def _get_struct_i2h4bd3f3I():
    global _struct_i2h4bd3f3I
    if _struct_i2h4bd3f3I is None:
        _struct_i2h4bd3f3I = struct.Struct("<i2h4bd3f3I")
    return _struct_i2h4bd3f3I
_struct_14d2i5B4I2f4I = None
def _get_struct_14d2i5B4I2f4I():
    global _struct_14d2i5B4I2f4I
    if _struct_14d2i5B4I2f4I is None:
        _struct_14d2i5B4I2f4I = struct.Struct("<14d2i5B4I2f4I")
    return _struct_14d2i5B4I2f4I
_struct_If9i2dh2i2f = None
def _get_struct_If9i2dh2i2f():
    global _struct_If9i2dh2i2f
    if _struct_If9i2dh2i2f is None:
        _struct_If9i2dh2i2f = struct.Struct("<If9i2dh2i2f")
    return _struct_If9i2dh2i2f
_struct_4i4db2i = None
def _get_struct_4i4db2i():
    global _struct_4i4db2i
    if _struct_4i4db2i is None:
        _struct_4i4db2i = struct.Struct("<4i4db2i")
    return _struct_4i4db2i
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
