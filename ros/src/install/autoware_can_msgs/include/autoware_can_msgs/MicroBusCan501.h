// Generated by gencpp from file autoware_can_msgs/MicroBusCan501.msg
// DO NOT EDIT!


#ifndef AUTOWARE_CAN_MSGS_MESSAGE_MICROBUSCAN501_H
#define AUTOWARE_CAN_MSGS_MESSAGE_MICROBUSCAN501_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace autoware_can_msgs
{
template <class ContainerAllocator>
struct MicroBusCan501_
{
  typedef MicroBusCan501_<ContainerAllocator> Type;

  MicroBusCan501_()
    : header()
    , emergency(false)
    , steer_auto(0)
    , drive_auto(0)
    , drive_mode(0)
    , velocity(0)
    , steering_angle(0)
    , pedal(0)
    , emergency_stop(0)
    , engine_start(false)
    , ignition(false)
    , wiper(false)
    , light_high(false)
    , light_low(false)
    , light_small(false)
    , horn(false)
    , hazard(false)
    , blinker_right(false)
    , blinker_left(false)
    , shift(0)
    , side_brake(0)
    , automatic_door(0)
    , read_counter(0)  {
    }
  MicroBusCan501_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , emergency(false)
    , steer_auto(0)
    , drive_auto(0)
    , drive_mode(0)
    , velocity(0)
    , steering_angle(0)
    , pedal(0)
    , emergency_stop(0)
    , engine_start(false)
    , ignition(false)
    , wiper(false)
    , light_high(false)
    , light_low(false)
    , light_small(false)
    , horn(false)
    , hazard(false)
    , blinker_right(false)
    , blinker_left(false)
    , shift(0)
    , side_brake(0)
    , automatic_door(0)
    , read_counter(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _emergency_type;
  _emergency_type emergency;

   typedef uint8_t _steer_auto_type;
  _steer_auto_type steer_auto;

   typedef uint8_t _drive_auto_type;
  _drive_auto_type drive_auto;

   typedef int8_t _drive_mode_type;
  _drive_mode_type drive_mode;

   typedef int16_t _velocity_type;
  _velocity_type velocity;

   typedef int16_t _steering_angle_type;
  _steering_angle_type steering_angle;

   typedef int16_t _pedal_type;
  _pedal_type pedal;

   typedef uint8_t _emergency_stop_type;
  _emergency_stop_type emergency_stop;

   typedef uint8_t _engine_start_type;
  _engine_start_type engine_start;

   typedef uint8_t _ignition_type;
  _ignition_type ignition;

   typedef uint8_t _wiper_type;
  _wiper_type wiper;

   typedef uint8_t _light_high_type;
  _light_high_type light_high;

   typedef uint8_t _light_low_type;
  _light_low_type light_low;

   typedef uint8_t _light_small_type;
  _light_small_type light_small;

   typedef uint8_t _horn_type;
  _horn_type horn;

   typedef uint8_t _hazard_type;
  _hazard_type hazard;

   typedef uint8_t _blinker_right_type;
  _blinker_right_type blinker_right;

   typedef uint8_t _blinker_left_type;
  _blinker_left_type blinker_left;

   typedef uint8_t _shift_type;
  _shift_type shift;

   typedef uint8_t _side_brake_type;
  _side_brake_type side_brake;

   typedef uint8_t _automatic_door_type;
  _automatic_door_type automatic_door;

   typedef uint32_t _read_counter_type;
  _read_counter_type read_counter;



  enum {
    DRIVE_MODE_NONE = 0,
    DRIVE_MODE_STROKE = 10,
    DRIVE_MODE_VELOCITY = 11,
    SHIFT_MANUAL = 0,
    SHIFT_NOW_CHANGE = 15,
    SHIFT_P = 8,
    SHIFT_R = 9,
    SHIFT_N = 10,
    SHIFT_D = 11,
    SHIFT_4 = 12,
    SHIFT_L = 13,
    STEER_V0 = 0u,
    STEER_AUTO = 10u,
    STEER_NOT_V0 = 4u,
    STEER_NOT_JOY_CENTER = 1u,
    STEER_NOT_BOARD_RES = 8u,
    DRIVE_V0 = 0u,
    DRIVE_AUTO = 10u,
    DRIVE_NOT_V0 = 4u,
    DRIVE_NOT_JOY_CENTER = 1u,
    DRIVE_NOT_BOARD_RES = 8u,
  };


  typedef boost::shared_ptr< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> const> ConstPtr;

}; // struct MicroBusCan501_

typedef ::autoware_can_msgs::MicroBusCan501_<std::allocator<void> > MicroBusCan501;

typedef boost::shared_ptr< ::autoware_can_msgs::MicroBusCan501 > MicroBusCan501Ptr;
typedef boost::shared_ptr< ::autoware_can_msgs::MicroBusCan501 const> MicroBusCan501ConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autoware_can_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'autoware_can_msgs': ['/home/autoware/Autoware_1.11.0_sai_edit/ros/src/msgs/autoware_can_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> >
{
  static const char* value()
  {
    return "539da6c17a8bf01b808295f7fea2b8ab";
  }

  static const char* value(const ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x539da6c17a8bf01bULL;
  static const uint64_t static_value2 = 0x808295f7fea2b8abULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_can_msgs/MicroBusCan501";
  }

  static const char* value(const ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 DRIVE_MODE_NONE = 0\n\
int8 DRIVE_MODE_STROKE = 10\n\
int8 DRIVE_MODE_VELOCITY = 11\n\
\n\
int8 SHIFT_MANUAL = 0\n\
int8 SHIFT_NOW_CHANGE = 15\n\
int8 SHIFT_P = 8\n\
int8 SHIFT_R = 9\n\
int8 SHIFT_N = 10\n\
int8 SHIFT_D = 11\n\
int8 SHIFT_4 = 12\n\
int8 SHIFT_L = 13\n\
\n\
uint8 STEER_V0 = 0\n\
uint8 STEER_AUTO = 10\n\
uint8 STEER_NOT_V0 = 4\n\
uint8 STEER_NOT_JOY_CENTER = 1\n\
uint8 STEER_NOT_BOARD_RES = 8\n\
\n\
uint8 DRIVE_V0 = 0\n\
uint8 DRIVE_AUTO = 10\n\
uint8 DRIVE_NOT_V0 = 4\n\
uint8 DRIVE_NOT_JOY_CENTER = 1\n\
uint8 DRIVE_NOT_BOARD_RES = 8\n\
\n\
Header header\n\
bool emergency\n\
uint8 steer_auto\n\
uint8 drive_auto\n\
int8 drive_mode\n\
int16 velocity\n\
int16 steering_angle\n\
int16 pedal\n\
uint8 emergency_stop\n\
bool engine_start\n\
bool ignition\n\
bool wiper\n\
bool light_high\n\
bool light_low\n\
bool light_small\n\
bool horn\n\
bool hazard\n\
bool blinker_right\n\
bool blinker_left\n\
uint8 shift\n\
uint8 side_brake\n\
uint8 automatic_door\n\
uint32 read_counter\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.emergency);
      stream.next(m.steer_auto);
      stream.next(m.drive_auto);
      stream.next(m.drive_mode);
      stream.next(m.velocity);
      stream.next(m.steering_angle);
      stream.next(m.pedal);
      stream.next(m.emergency_stop);
      stream.next(m.engine_start);
      stream.next(m.ignition);
      stream.next(m.wiper);
      stream.next(m.light_high);
      stream.next(m.light_low);
      stream.next(m.light_small);
      stream.next(m.horn);
      stream.next(m.hazard);
      stream.next(m.blinker_right);
      stream.next(m.blinker_left);
      stream.next(m.shift);
      stream.next(m.side_brake);
      stream.next(m.automatic_door);
      stream.next(m.read_counter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MicroBusCan501_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_can_msgs::MicroBusCan501_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "emergency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency);
    s << indent << "steer_auto: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steer_auto);
    s << indent << "drive_auto: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drive_auto);
    s << indent << "drive_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.drive_mode);
    s << indent << "velocity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.velocity);
    s << indent << "steering_angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.steering_angle);
    s << indent << "pedal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pedal);
    s << indent << "emergency_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_stop);
    s << indent << "engine_start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.engine_start);
    s << indent << "ignition: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignition);
    s << indent << "wiper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wiper);
    s << indent << "light_high: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.light_high);
    s << indent << "light_low: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.light_low);
    s << indent << "light_small: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.light_small);
    s << indent << "horn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.horn);
    s << indent << "hazard: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hazard);
    s << indent << "blinker_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blinker_right);
    s << indent << "blinker_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blinker_left);
    s << indent << "shift: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shift);
    s << indent << "side_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.side_brake);
    s << indent << "automatic_door: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.automatic_door);
    s << indent << "read_counter: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.read_counter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_CAN_MSGS_MESSAGE_MICROBUSCAN501_H
