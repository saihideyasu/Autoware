// Generated by gencpp from file autoware_can_msgs/MicroBusCan502.msg
// DO NOT EDIT!


#ifndef AUTOWARE_CAN_MSGS_MESSAGE_MICROBUSCAN502_H
#define AUTOWARE_CAN_MSGS_MESSAGE_MICROBUSCAN502_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace autoware_can_msgs
{
template <class ContainerAllocator>
struct MicroBusCan502_
{
  typedef MicroBusCan502_<ContainerAllocator> Type;

  MicroBusCan502_()
    : header()
    , cycle_time(0.0)
    , angle_actual(0)
    , angle_deg(0.0)
    , velocity_actual(0)
    , velocity_average(0)
    , velocity_median(0)
    , acceleration_actual(0)
    , acceleration_average(0)
    , acceleration_median(0)
    , velocity_mps(0.0)
    , clutch(false)
    , read_counter(0)  {
    }
  MicroBusCan502_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cycle_time(0.0)
    , angle_actual(0)
    , angle_deg(0.0)
    , velocity_actual(0)
    , velocity_average(0)
    , velocity_median(0)
    , acceleration_actual(0)
    , acceleration_average(0)
    , acceleration_median(0)
    , velocity_mps(0.0)
    , clutch(false)
    , read_counter(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _cycle_time_type;
  _cycle_time_type cycle_time;

   typedef int16_t _angle_actual_type;
  _angle_actual_type angle_actual;

   typedef double _angle_deg_type;
  _angle_deg_type angle_deg;

   typedef int16_t _velocity_actual_type;
  _velocity_actual_type velocity_actual;

   typedef int16_t _velocity_average_type;
  _velocity_average_type velocity_average;

   typedef int16_t _velocity_median_type;
  _velocity_median_type velocity_median;

   typedef int16_t _acceleration_actual_type;
  _acceleration_actual_type acceleration_actual;

   typedef int16_t _acceleration_average_type;
  _acceleration_average_type acceleration_average;

   typedef int16_t _acceleration_median_type;
  _acceleration_median_type acceleration_median;

   typedef double _velocity_mps_type;
  _velocity_mps_type velocity_mps;

   typedef uint8_t _clutch_type;
  _clutch_type clutch;

   typedef uint32_t _read_counter_type;
  _read_counter_type read_counter;





  typedef boost::shared_ptr< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> const> ConstPtr;

}; // struct MicroBusCan502_

typedef ::autoware_can_msgs::MicroBusCan502_<std::allocator<void> > MicroBusCan502;

typedef boost::shared_ptr< ::autoware_can_msgs::MicroBusCan502 > MicroBusCan502Ptr;
typedef boost::shared_ptr< ::autoware_can_msgs::MicroBusCan502 const> MicroBusCan502ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autoware_can_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'autoware_can_msgs': ['/home/autoware/Autoware_1.11.0_sai_edit/ros/src/msgs/autoware_can_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1b8e414429b8dde101c01e1b7adae99";
  }

  static const char* value(const ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1b8e414429b8ddeULL;
  static const uint64_t static_value2 = 0x101c01e1b7adae99ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_can_msgs/MicroBusCan502";
  }

  static const char* value(const ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 cycle_time\n\
int16 angle_actual\n\
float64 angle_deg\n\
int16 velocity_actual\n\
int16 velocity_average\n\
int16 velocity_median\n\
int16 acceleration_actual\n\
int16 acceleration_average\n\
int16 acceleration_median\n\
float64 velocity_mps\n\
bool clutch\n\
uint32 read_counter\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cycle_time);
      stream.next(m.angle_actual);
      stream.next(m.angle_deg);
      stream.next(m.velocity_actual);
      stream.next(m.velocity_average);
      stream.next(m.velocity_median);
      stream.next(m.acceleration_actual);
      stream.next(m.acceleration_average);
      stream.next(m.acceleration_median);
      stream.next(m.velocity_mps);
      stream.next(m.clutch);
      stream.next(m.read_counter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MicroBusCan502_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_can_msgs::MicroBusCan502_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cycle_time: ";
    Printer<double>::stream(s, indent + "  ", v.cycle_time);
    s << indent << "angle_actual: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angle_actual);
    s << indent << "angle_deg: ";
    Printer<double>::stream(s, indent + "  ", v.angle_deg);
    s << indent << "velocity_actual: ";
    Printer<int16_t>::stream(s, indent + "  ", v.velocity_actual);
    s << indent << "velocity_average: ";
    Printer<int16_t>::stream(s, indent + "  ", v.velocity_average);
    s << indent << "velocity_median: ";
    Printer<int16_t>::stream(s, indent + "  ", v.velocity_median);
    s << indent << "acceleration_actual: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acceleration_actual);
    s << indent << "acceleration_average: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acceleration_average);
    s << indent << "acceleration_median: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acceleration_median);
    s << indent << "velocity_mps: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_mps);
    s << indent << "clutch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clutch);
    s << indent << "read_counter: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.read_counter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_CAN_MSGS_MESSAGE_MICROBUSCAN502_H
