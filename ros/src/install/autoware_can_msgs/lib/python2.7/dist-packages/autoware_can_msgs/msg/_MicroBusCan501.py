# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_can_msgs/MicroBusCan501.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class MicroBusCan501(genpy.Message):
  _md5sum = "539da6c17a8bf01b808295f7fea2b8ab"
  _type = "autoware_can_msgs/MicroBusCan501"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """int8 DRIVE_MODE_NONE = 0
int8 DRIVE_MODE_STROKE = 10
int8 DRIVE_MODE_VELOCITY = 11

int8 SHIFT_MANUAL = 0
int8 SHIFT_NOW_CHANGE = 15
int8 SHIFT_P = 8
int8 SHIFT_R = 9
int8 SHIFT_N = 10
int8 SHIFT_D = 11
int8 SHIFT_4 = 12
int8 SHIFT_L = 13

uint8 STEER_V0 = 0
uint8 STEER_AUTO = 10
uint8 STEER_NOT_V0 = 4
uint8 STEER_NOT_JOY_CENTER = 1
uint8 STEER_NOT_BOARD_RES = 8

uint8 DRIVE_V0 = 0
uint8 DRIVE_AUTO = 10
uint8 DRIVE_NOT_V0 = 4
uint8 DRIVE_NOT_JOY_CENTER = 1
uint8 DRIVE_NOT_BOARD_RES = 8

Header header
bool emergency
uint8 steer_auto
uint8 drive_auto
int8 drive_mode
int16 velocity
int16 steering_angle
int16 pedal
uint8 emergency_stop
bool engine_start
bool ignition
bool wiper
bool light_high
bool light_low
bool light_small
bool horn
bool hazard
bool blinker_right
bool blinker_left
uint8 shift
uint8 side_brake
uint8 automatic_door
uint32 read_counter

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  # Pseudo-constants
  DRIVE_MODE_NONE = 0
  DRIVE_MODE_STROKE = 10
  DRIVE_MODE_VELOCITY = 11
  SHIFT_MANUAL = 0
  SHIFT_NOW_CHANGE = 15
  SHIFT_P = 8
  SHIFT_R = 9
  SHIFT_N = 10
  SHIFT_D = 11
  SHIFT_4 = 12
  SHIFT_L = 13
  STEER_V0 = 0
  STEER_AUTO = 10
  STEER_NOT_V0 = 4
  STEER_NOT_JOY_CENTER = 1
  STEER_NOT_BOARD_RES = 8
  DRIVE_V0 = 0
  DRIVE_AUTO = 10
  DRIVE_NOT_V0 = 4
  DRIVE_NOT_JOY_CENTER = 1
  DRIVE_NOT_BOARD_RES = 8

  __slots__ = ['header','emergency','steer_auto','drive_auto','drive_mode','velocity','steering_angle','pedal','emergency_stop','engine_start','ignition','wiper','light_high','light_low','light_small','horn','hazard','blinker_right','blinker_left','shift','side_brake','automatic_door','read_counter']
  _slot_types = ['std_msgs/Header','bool','uint8','uint8','int8','int16','int16','int16','uint8','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','uint8','uint8','uint8','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,emergency,steer_auto,drive_auto,drive_mode,velocity,steering_angle,pedal,emergency_stop,engine_start,ignition,wiper,light_high,light_low,light_small,horn,hazard,blinker_right,blinker_left,shift,side_brake,automatic_door,read_counter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MicroBusCan501, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.emergency is None:
        self.emergency = False
      if self.steer_auto is None:
        self.steer_auto = 0
      if self.drive_auto is None:
        self.drive_auto = 0
      if self.drive_mode is None:
        self.drive_mode = 0
      if self.velocity is None:
        self.velocity = 0
      if self.steering_angle is None:
        self.steering_angle = 0
      if self.pedal is None:
        self.pedal = 0
      if self.emergency_stop is None:
        self.emergency_stop = 0
      if self.engine_start is None:
        self.engine_start = False
      if self.ignition is None:
        self.ignition = False
      if self.wiper is None:
        self.wiper = False
      if self.light_high is None:
        self.light_high = False
      if self.light_low is None:
        self.light_low = False
      if self.light_small is None:
        self.light_small = False
      if self.horn is None:
        self.horn = False
      if self.hazard is None:
        self.hazard = False
      if self.blinker_right is None:
        self.blinker_right = False
      if self.blinker_left is None:
        self.blinker_left = False
      if self.shift is None:
        self.shift = 0
      if self.side_brake is None:
        self.side_brake = 0
      if self.automatic_door is None:
        self.automatic_door = 0
      if self.read_counter is None:
        self.read_counter = 0
    else:
      self.header = std_msgs.msg.Header()
      self.emergency = False
      self.steer_auto = 0
      self.drive_auto = 0
      self.drive_mode = 0
      self.velocity = 0
      self.steering_angle = 0
      self.pedal = 0
      self.emergency_stop = 0
      self.engine_start = False
      self.ignition = False
      self.wiper = False
      self.light_high = False
      self.light_low = False
      self.light_small = False
      self.horn = False
      self.hazard = False
      self.blinker_right = False
      self.blinker_left = False
      self.shift = 0
      self.side_brake = 0
      self.automatic_door = 0
      self.read_counter = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3Bb3h14BI().pack(_x.emergency, _x.steer_auto, _x.drive_auto, _x.drive_mode, _x.velocity, _x.steering_angle, _x.pedal, _x.emergency_stop, _x.engine_start, _x.ignition, _x.wiper, _x.light_high, _x.light_low, _x.light_small, _x.horn, _x.hazard, _x.blinker_right, _x.blinker_left, _x.shift, _x.side_brake, _x.automatic_door, _x.read_counter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.emergency, _x.steer_auto, _x.drive_auto, _x.drive_mode, _x.velocity, _x.steering_angle, _x.pedal, _x.emergency_stop, _x.engine_start, _x.ignition, _x.wiper, _x.light_high, _x.light_low, _x.light_small, _x.horn, _x.hazard, _x.blinker_right, _x.blinker_left, _x.shift, _x.side_brake, _x.automatic_door, _x.read_counter,) = _get_struct_3Bb3h14BI().unpack(str[start:end])
      self.emergency = bool(self.emergency)
      self.engine_start = bool(self.engine_start)
      self.ignition = bool(self.ignition)
      self.wiper = bool(self.wiper)
      self.light_high = bool(self.light_high)
      self.light_low = bool(self.light_low)
      self.light_small = bool(self.light_small)
      self.horn = bool(self.horn)
      self.hazard = bool(self.hazard)
      self.blinker_right = bool(self.blinker_right)
      self.blinker_left = bool(self.blinker_left)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3Bb3h14BI().pack(_x.emergency, _x.steer_auto, _x.drive_auto, _x.drive_mode, _x.velocity, _x.steering_angle, _x.pedal, _x.emergency_stop, _x.engine_start, _x.ignition, _x.wiper, _x.light_high, _x.light_low, _x.light_small, _x.horn, _x.hazard, _x.blinker_right, _x.blinker_left, _x.shift, _x.side_brake, _x.automatic_door, _x.read_counter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.emergency, _x.steer_auto, _x.drive_auto, _x.drive_mode, _x.velocity, _x.steering_angle, _x.pedal, _x.emergency_stop, _x.engine_start, _x.ignition, _x.wiper, _x.light_high, _x.light_low, _x.light_small, _x.horn, _x.hazard, _x.blinker_right, _x.blinker_left, _x.shift, _x.side_brake, _x.automatic_door, _x.read_counter,) = _get_struct_3Bb3h14BI().unpack(str[start:end])
      self.emergency = bool(self.emergency)
      self.engine_start = bool(self.engine_start)
      self.ignition = bool(self.ignition)
      self.wiper = bool(self.wiper)
      self.light_high = bool(self.light_high)
      self.light_low = bool(self.light_low)
      self.light_small = bool(self.light_small)
      self.horn = bool(self.horn)
      self.hazard = bool(self.hazard)
      self.blinker_right = bool(self.blinker_right)
      self.blinker_left = bool(self.blinker_left)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3Bb3h14BI = None
def _get_struct_3Bb3h14BI():
    global _struct_3Bb3h14BI
    if _struct_3Bb3h14BI is None:
        _struct_3Bb3h14BI = struct.Struct("<3Bb3h14BI")
    return _struct_3Bb3h14BI
