// Generated by gencpp from file autoware_config_msgs/ConfigMicroBusCan.msg
// DO NOT EDIT!


#ifndef AUTOWARE_CONFIG_MSGS_MESSAGE_CONFIGMICROBUSCAN_H
#define AUTOWARE_CONFIG_MSGS_MESSAGE_CONFIGMICROBUSCAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace autoware_config_msgs
{
template <class ContainerAllocator>
struct ConfigMicroBusCan_
{
  typedef ConfigMicroBusCan_<ContainerAllocator> Type;

  ConfigMicroBusCan_()
    : header()
    , use_position_checker(false)
    , velocity_limit(0.0)
    , velocity_stop_th(0.0)
    , accel_max_i(0.0)
    , brake_max_i(0.0)
    , k_accel_p_velocity(0.0)
    , k_accel_i_velocity(0.0)
    , k_accel_d_velocity(0.0)
    , k_brake_p_velocity(0.0)
    , k_brake_i_velocity(0.0)
    , k_brake_d_velocity(0.0)
    , k_accel_p_acceleration(0.0)
    , k_accel_i_acceleration(0.0)
    , k_accel_d_acceleration(0.0)
    , k_brake_p_acceleration(0.0)
    , k_brake_i_acceleration(0.0)
    , k_brake_d_acceleration(0.0)
    , k_accel_p_distance(0.0)
    , k_accel_i_distance(0.0)
    , k_accel_d_distance(0.0)
    , k_brake_p_distance(0.0)
    , k_brake_i_distance(0.0)
    , k_brake_d_distance(0.0)
    , steer_max_i(0.0)
    , k_steer_p_distance(0.0)
    , k_steer_i_distance(0.0)
    , k_steer_d_distance(0.0)
    , pedal_stroke_center(0)
    , pedal_stroke_max(0)
    , pedal_stroke_min(0)
    , brake_stroke_stopping_med(0)
    , accel_stroke_offset(0)
    , brake_stroke_offset(0)
    , gnss_lat_limit(0.0)
    , gnss_lon_limit(0.0)
    , gnss_alt_limit(0.0)
    , acceptable_velocity_variation(0.0)
    , difference_to_waypoint_distance(0.0)
    , difference_to_waypoint_angular(0.0)  {
    }
  ConfigMicroBusCan_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , use_position_checker(false)
    , velocity_limit(0.0)
    , velocity_stop_th(0.0)
    , accel_max_i(0.0)
    , brake_max_i(0.0)
    , k_accel_p_velocity(0.0)
    , k_accel_i_velocity(0.0)
    , k_accel_d_velocity(0.0)
    , k_brake_p_velocity(0.0)
    , k_brake_i_velocity(0.0)
    , k_brake_d_velocity(0.0)
    , k_accel_p_acceleration(0.0)
    , k_accel_i_acceleration(0.0)
    , k_accel_d_acceleration(0.0)
    , k_brake_p_acceleration(0.0)
    , k_brake_i_acceleration(0.0)
    , k_brake_d_acceleration(0.0)
    , k_accel_p_distance(0.0)
    , k_accel_i_distance(0.0)
    , k_accel_d_distance(0.0)
    , k_brake_p_distance(0.0)
    , k_brake_i_distance(0.0)
    , k_brake_d_distance(0.0)
    , steer_max_i(0.0)
    , k_steer_p_distance(0.0)
    , k_steer_i_distance(0.0)
    , k_steer_d_distance(0.0)
    , pedal_stroke_center(0)
    , pedal_stroke_max(0)
    , pedal_stroke_min(0)
    , brake_stroke_stopping_med(0)
    , accel_stroke_offset(0)
    , brake_stroke_offset(0)
    , gnss_lat_limit(0.0)
    , gnss_lon_limit(0.0)
    , gnss_alt_limit(0.0)
    , acceptable_velocity_variation(0.0)
    , difference_to_waypoint_distance(0.0)
    , difference_to_waypoint_angular(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _use_position_checker_type;
  _use_position_checker_type use_position_checker;

   typedef double _velocity_limit_type;
  _velocity_limit_type velocity_limit;

   typedef double _velocity_stop_th_type;
  _velocity_stop_th_type velocity_stop_th;

   typedef double _accel_max_i_type;
  _accel_max_i_type accel_max_i;

   typedef double _brake_max_i_type;
  _brake_max_i_type brake_max_i;

   typedef double _k_accel_p_velocity_type;
  _k_accel_p_velocity_type k_accel_p_velocity;

   typedef double _k_accel_i_velocity_type;
  _k_accel_i_velocity_type k_accel_i_velocity;

   typedef double _k_accel_d_velocity_type;
  _k_accel_d_velocity_type k_accel_d_velocity;

   typedef double _k_brake_p_velocity_type;
  _k_brake_p_velocity_type k_brake_p_velocity;

   typedef double _k_brake_i_velocity_type;
  _k_brake_i_velocity_type k_brake_i_velocity;

   typedef double _k_brake_d_velocity_type;
  _k_brake_d_velocity_type k_brake_d_velocity;

   typedef double _k_accel_p_acceleration_type;
  _k_accel_p_acceleration_type k_accel_p_acceleration;

   typedef double _k_accel_i_acceleration_type;
  _k_accel_i_acceleration_type k_accel_i_acceleration;

   typedef double _k_accel_d_acceleration_type;
  _k_accel_d_acceleration_type k_accel_d_acceleration;

   typedef double _k_brake_p_acceleration_type;
  _k_brake_p_acceleration_type k_brake_p_acceleration;

   typedef double _k_brake_i_acceleration_type;
  _k_brake_i_acceleration_type k_brake_i_acceleration;

   typedef double _k_brake_d_acceleration_type;
  _k_brake_d_acceleration_type k_brake_d_acceleration;

   typedef double _k_accel_p_distance_type;
  _k_accel_p_distance_type k_accel_p_distance;

   typedef double _k_accel_i_distance_type;
  _k_accel_i_distance_type k_accel_i_distance;

   typedef double _k_accel_d_distance_type;
  _k_accel_d_distance_type k_accel_d_distance;

   typedef double _k_brake_p_distance_type;
  _k_brake_p_distance_type k_brake_p_distance;

   typedef double _k_brake_i_distance_type;
  _k_brake_i_distance_type k_brake_i_distance;

   typedef double _k_brake_d_distance_type;
  _k_brake_d_distance_type k_brake_d_distance;

   typedef double _steer_max_i_type;
  _steer_max_i_type steer_max_i;

   typedef double _k_steer_p_distance_type;
  _k_steer_p_distance_type k_steer_p_distance;

   typedef double _k_steer_i_distance_type;
  _k_steer_i_distance_type k_steer_i_distance;

   typedef double _k_steer_d_distance_type;
  _k_steer_d_distance_type k_steer_d_distance;

   typedef int16_t _pedal_stroke_center_type;
  _pedal_stroke_center_type pedal_stroke_center;

   typedef int16_t _pedal_stroke_max_type;
  _pedal_stroke_max_type pedal_stroke_max;

   typedef int16_t _pedal_stroke_min_type;
  _pedal_stroke_min_type pedal_stroke_min;

   typedef int16_t _brake_stroke_stopping_med_type;
  _brake_stroke_stopping_med_type brake_stroke_stopping_med;

   typedef int16_t _accel_stroke_offset_type;
  _accel_stroke_offset_type accel_stroke_offset;

   typedef int16_t _brake_stroke_offset_type;
  _brake_stroke_offset_type brake_stroke_offset;

   typedef double _gnss_lat_limit_type;
  _gnss_lat_limit_type gnss_lat_limit;

   typedef double _gnss_lon_limit_type;
  _gnss_lon_limit_type gnss_lon_limit;

   typedef double _gnss_alt_limit_type;
  _gnss_alt_limit_type gnss_alt_limit;

   typedef double _acceptable_velocity_variation_type;
  _acceptable_velocity_variation_type acceptable_velocity_variation;

   typedef double _difference_to_waypoint_distance_type;
  _difference_to_waypoint_distance_type difference_to_waypoint_distance;

   typedef double _difference_to_waypoint_angular_type;
  _difference_to_waypoint_angular_type difference_to_waypoint_angular;





  typedef boost::shared_ptr< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> const> ConstPtr;

}; // struct ConfigMicroBusCan_

typedef ::autoware_config_msgs::ConfigMicroBusCan_<std::allocator<void> > ConfigMicroBusCan;

typedef boost::shared_ptr< ::autoware_config_msgs::ConfigMicroBusCan > ConfigMicroBusCanPtr;
typedef boost::shared_ptr< ::autoware_config_msgs::ConfigMicroBusCan const> ConfigMicroBusCanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autoware_config_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'autoware_config_msgs': ['/home/autoware/Autoware_1.11.0_sai_edit/ros/src/msgs/autoware_config_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26c6999f9bd3f4e18f1576c259a99941";
  }

  static const char* value(const ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26c6999f9bd3f4e1ULL;
  static const uint64_t static_value2 = 0x8f1576c259a99941ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_config_msgs/ConfigMicroBusCan";
  }

  static const char* value(const ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
bool use_position_checker\n\
float64 velocity_limit\n\
float64 velocity_stop_th\n\
float64 accel_max_i\n\
float64 brake_max_i\n\
float64 k_accel_p_velocity\n\
float64 k_accel_i_velocity\n\
float64 k_accel_d_velocity\n\
float64 k_brake_p_velocity\n\
float64 k_brake_i_velocity\n\
float64 k_brake_d_velocity\n\
float64 k_accel_p_acceleration\n\
float64 k_accel_i_acceleration\n\
float64 k_accel_d_acceleration\n\
float64 k_brake_p_acceleration\n\
float64 k_brake_i_acceleration\n\
float64 k_brake_d_acceleration\n\
float64 k_accel_p_distance\n\
float64 k_accel_i_distance\n\
float64 k_accel_d_distance\n\
float64 k_brake_p_distance\n\
float64 k_brake_i_distance\n\
float64 k_brake_d_distance\n\
float64 steer_max_i\n\
float64 k_steer_p_distance\n\
float64 k_steer_i_distance\n\
float64 k_steer_d_distance\n\
int16 pedal_stroke_center\n\
int16 pedal_stroke_max\n\
int16 pedal_stroke_min\n\
int16 brake_stroke_stopping_med\n\
int16 accel_stroke_offset\n\
int16 brake_stroke_offset\n\
float64 gnss_lat_limit\n\
float64 gnss_lon_limit\n\
float64 gnss_alt_limit\n\
float64 acceptable_velocity_variation\n\
float64 difference_to_waypoint_distance\n\
float64 difference_to_waypoint_angular\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.use_position_checker);
      stream.next(m.velocity_limit);
      stream.next(m.velocity_stop_th);
      stream.next(m.accel_max_i);
      stream.next(m.brake_max_i);
      stream.next(m.k_accel_p_velocity);
      stream.next(m.k_accel_i_velocity);
      stream.next(m.k_accel_d_velocity);
      stream.next(m.k_brake_p_velocity);
      stream.next(m.k_brake_i_velocity);
      stream.next(m.k_brake_d_velocity);
      stream.next(m.k_accel_p_acceleration);
      stream.next(m.k_accel_i_acceleration);
      stream.next(m.k_accel_d_acceleration);
      stream.next(m.k_brake_p_acceleration);
      stream.next(m.k_brake_i_acceleration);
      stream.next(m.k_brake_d_acceleration);
      stream.next(m.k_accel_p_distance);
      stream.next(m.k_accel_i_distance);
      stream.next(m.k_accel_d_distance);
      stream.next(m.k_brake_p_distance);
      stream.next(m.k_brake_i_distance);
      stream.next(m.k_brake_d_distance);
      stream.next(m.steer_max_i);
      stream.next(m.k_steer_p_distance);
      stream.next(m.k_steer_i_distance);
      stream.next(m.k_steer_d_distance);
      stream.next(m.pedal_stroke_center);
      stream.next(m.pedal_stroke_max);
      stream.next(m.pedal_stroke_min);
      stream.next(m.brake_stroke_stopping_med);
      stream.next(m.accel_stroke_offset);
      stream.next(m.brake_stroke_offset);
      stream.next(m.gnss_lat_limit);
      stream.next(m.gnss_lon_limit);
      stream.next(m.gnss_alt_limit);
      stream.next(m.acceptable_velocity_variation);
      stream.next(m.difference_to_waypoint_distance);
      stream.next(m.difference_to_waypoint_angular);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConfigMicroBusCan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_config_msgs::ConfigMicroBusCan_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "use_position_checker: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_position_checker);
    s << indent << "velocity_limit: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_limit);
    s << indent << "velocity_stop_th: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_stop_th);
    s << indent << "accel_max_i: ";
    Printer<double>::stream(s, indent + "  ", v.accel_max_i);
    s << indent << "brake_max_i: ";
    Printer<double>::stream(s, indent + "  ", v.brake_max_i);
    s << indent << "k_accel_p_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.k_accel_p_velocity);
    s << indent << "k_accel_i_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.k_accel_i_velocity);
    s << indent << "k_accel_d_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.k_accel_d_velocity);
    s << indent << "k_brake_p_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.k_brake_p_velocity);
    s << indent << "k_brake_i_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.k_brake_i_velocity);
    s << indent << "k_brake_d_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.k_brake_d_velocity);
    s << indent << "k_accel_p_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.k_accel_p_acceleration);
    s << indent << "k_accel_i_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.k_accel_i_acceleration);
    s << indent << "k_accel_d_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.k_accel_d_acceleration);
    s << indent << "k_brake_p_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.k_brake_p_acceleration);
    s << indent << "k_brake_i_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.k_brake_i_acceleration);
    s << indent << "k_brake_d_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.k_brake_d_acceleration);
    s << indent << "k_accel_p_distance: ";
    Printer<double>::stream(s, indent + "  ", v.k_accel_p_distance);
    s << indent << "k_accel_i_distance: ";
    Printer<double>::stream(s, indent + "  ", v.k_accel_i_distance);
    s << indent << "k_accel_d_distance: ";
    Printer<double>::stream(s, indent + "  ", v.k_accel_d_distance);
    s << indent << "k_brake_p_distance: ";
    Printer<double>::stream(s, indent + "  ", v.k_brake_p_distance);
    s << indent << "k_brake_i_distance: ";
    Printer<double>::stream(s, indent + "  ", v.k_brake_i_distance);
    s << indent << "k_brake_d_distance: ";
    Printer<double>::stream(s, indent + "  ", v.k_brake_d_distance);
    s << indent << "steer_max_i: ";
    Printer<double>::stream(s, indent + "  ", v.steer_max_i);
    s << indent << "k_steer_p_distance: ";
    Printer<double>::stream(s, indent + "  ", v.k_steer_p_distance);
    s << indent << "k_steer_i_distance: ";
    Printer<double>::stream(s, indent + "  ", v.k_steer_i_distance);
    s << indent << "k_steer_d_distance: ";
    Printer<double>::stream(s, indent + "  ", v.k_steer_d_distance);
    s << indent << "pedal_stroke_center: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pedal_stroke_center);
    s << indent << "pedal_stroke_max: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pedal_stroke_max);
    s << indent << "pedal_stroke_min: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pedal_stroke_min);
    s << indent << "brake_stroke_stopping_med: ";
    Printer<int16_t>::stream(s, indent + "  ", v.brake_stroke_stopping_med);
    s << indent << "accel_stroke_offset: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accel_stroke_offset);
    s << indent << "brake_stroke_offset: ";
    Printer<int16_t>::stream(s, indent + "  ", v.brake_stroke_offset);
    s << indent << "gnss_lat_limit: ";
    Printer<double>::stream(s, indent + "  ", v.gnss_lat_limit);
    s << indent << "gnss_lon_limit: ";
    Printer<double>::stream(s, indent + "  ", v.gnss_lon_limit);
    s << indent << "gnss_alt_limit: ";
    Printer<double>::stream(s, indent + "  ", v.gnss_alt_limit);
    s << indent << "acceptable_velocity_variation: ";
    Printer<double>::stream(s, indent + "  ", v.acceptable_velocity_variation);
    s << indent << "difference_to_waypoint_distance: ";
    Printer<double>::stream(s, indent + "  ", v.difference_to_waypoint_distance);
    s << indent << "difference_to_waypoint_angular: ";
    Printer<double>::stream(s, indent + "  ", v.difference_to_waypoint_angular);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_CONFIG_MSGS_MESSAGE_CONFIGMICROBUSCAN_H
