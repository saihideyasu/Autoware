# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_msgs/DetectedObjectArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import autoware_msgs.msg
import sensor_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class DetectedObjectArray(genpy.Message):
  _md5sum = "1bb54ca6f948c0f95db689e369a82596"
  _type = "autoware_msgs/DetectedObjectArray"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
DetectedObject[] objects
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: autoware_msgs/DetectedObject
std_msgs/Header                 header

uint32                          id
string                          label
float32                         score   #Score as defined by the detection, Optional
std_msgs/ColorRGBA              color   # Define this object specific color
bool                            valid   # Defines if this object is valid, or invalid as defined by the filtering

################ 3D BB
string                          space_frame #3D Space coordinate frame of the object, required if pose and dimensions are defines
geometry_msgs/Pose              pose
geometry_msgs/Vector3           dimensions
geometry_msgs/Vector3           variance
geometry_msgs/Twist             velocity
geometry_msgs/Twist             acceleration

sensor_msgs/PointCloud2         pointcloud

geometry_msgs/PolygonStamped    convex_hull
autoware_msgs/LaneArray         candidate_trajectories

bool                            pose_reliable
bool                            velocity_reliable
bool                            acceleration_reliable

############### 2D Rect
string                          image_frame # Image coordinate Frame,        Required if x,y,w,h defined
int32                           x           # X coord in image space(pixel) of the initial point of the Rect
int32                           y           # Y coord in image space(pixel) of the initial point of the Rect
int32                           width       # Width of the Rect in pixels
int32                           height      # Height of the Rect in pixels
float32                         angle       # Angle [0 to 2*PI), allow rotated rects

sensor_msgs/Image               roi_image

############### Indicator information
uint8                          indicator_state # INDICATOR_LEFT = 0, INDICATOR_RIGHT = 1, INDICATOR_BOTH = 2, INDICATOR_NONE = 3

############### Behavior State of the Detected Object
uint8                           behavior_state # FORWARD_STATE = 0, STOPPING_STATE = 1, BRANCH_LEFT_STATE = 2, BRANCH_RIGHT_STATE = 3, YIELDING_STATE = 4, ACCELERATING_STATE = 5, SLOWDOWN_STATE = 6

#
string[]                        user_defined_info
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: geometry_msgs/PolygonStamped
# This represents a Polygon with reference coordinate frame and timestamp
Header header
Polygon polygon

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: autoware_msgs/LaneArray
int32 id
Lane[] lanes

================================================================================
MSG: autoware_msgs/Lane
Header header
int32 increment
int32 lane_id
Waypoint[] waypoints

uint32 lane_index
float32 cost
float32 closest_object_distance
float32 closest_object_velocity
bool is_blocked

================================================================================
MSG: autoware_msgs/Waypoint
# global id
int32 gid 
# local id
int32 lid
geometry_msgs/PoseStamped pose
geometry_msgs/TwistStamped twist
DTLane dtlane
int32 change_flag
WaypointState wpstate

uint32 lane_id
uint32 left_lane_id
uint32 right_lane_id
uint32 stop_line_id
float32 cost
float32 time_cost

# Lane Direction
# FORWARD				= 0
# FORWARD_LEFT	 		= 1
# FORWARD_RIGHT			= 2
# BACKWARD				= 3 
# BACKWARD_LEFT			= 4
# BACKWARD_RIGHT		= 5
# STANDSTILL	 		= 6
uint32 direction

WaypointParam waypoint_param

ExtractedPosition[] signals

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: autoware_msgs/DTLane
float64 dist
float64 dir
float64 apara
float64 r
float64 slope
float64 cant
float64 lw
float64 rw

================================================================================
MSG: autoware_msgs/WaypointState
int32 aid
uint8 NULLSTATE=0

# lanechange
uint8 lanechange_state

# bilinker
uint8 steering_state
uint8 STR_LEFT=1
uint8 STR_RIGHT=2
uint8 STR_STRAIGHT=3
uint8 STR_BACK=4

uint8 accel_state

uint8 stop_state
# 1 is stopline, 2 is stop which can only be released manually.
uint8 TYPE_STOPLINE=1
uint8 TYPE_STOP=2

uint8 event_state
uint8 TYPE_EVENT_NULL = 0
uint8 TYPE_EVENT_GOAL = 1
uint8 TYPE_EVENT_MIDDLE_GOAL = 2
uint8 TYPE_EVENT_POSITION_STOP = 3
uint8 TYPE_EVENT_BUS_STOP = 4
uint8 TYPE_EVENT_PARKING = 5

================================================================================
MSG: autoware_msgs/WaypointParam
Header header
uint32 id
float32 weight
int32 blinker
int32 feat_proj_x
int32 feat_proj_y
int32 velocity_KPPlus
int32 velocity_KPMinus
int32 velocity_punchPlus
int32 velocity_punchMinus
int32 velocity_windowPlus
int32 velocity_windowMinus
float64 drive_stroke
float64 brake_stroke
int16 mb_pedal
int32 pause
int32 pauseGroup
float32 vgf_leafsize
float32 vgf_measurement_range
ExtractedPosition[] signals
int32 curve_flag
int16 microbus_pedal
int16 microbus_angle
int8 automatic_door
int8 signal_stop_line
int8 temporary_stop_line
int8 fusion_select
float64 steer_correction
float32 lookahead_ratio
float32 minimum_lookahead_distance
float32 lookahead_ratio_magn
LiesseXZB70MParam liesse

================================================================================
MSG: autoware_msgs/ExtractedPosition
# This message defines the information required to describe a lamp (bulb)
# in a traffic signal, according to the information extracted from the ADAS Map
# and the extrinsic camera calibration

int32 signalId  # Traffic Signal Lamp ID
int32 u         # Lamp ROI x in image coords
int32 v         # Lamp ROI y in image coords
int32 radius    # Lamp Radius
float64 x       # X position in map coordinates
float64 y       # Y position in map coordinates
float64 z       # Z position in map coordinates
float64 hang    # Azimuth "Horizontal Angle"
int8 type       # Lamp Type (red, yellow, green, ...)
int32 linkId    # Closest LinkID (lane) in VectorMap
int32 plId      # PoleID to which this Lamp belongs to

================================================================================
MSG: autoware_msgs/LiesseXZB70MParam
Header header
int8 SHIFT_P = 0
int8 SHIFT_R = 1
int8 SHIFT_N = 2
int8 SHIFT_D = 3
int8 SHIFT_4 = 4
int8 SHIFT_L = 5
int8 shift

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)
"""
  __slots__ = ['header','objects']
  _slot_types = ['std_msgs/Header','autoware_msgs/DetectedObject[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectedObjectArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = []
    else:
      self.header = std_msgs.msg.Header()
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v1 = val1.header
        buff.write(_get_struct_I().pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_I().pack(val1.id))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_f().pack(val1.score))
        _v3 = val1.color
        _x = _v3
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        buff.write(_get_struct_B().pack(val1.valid))
        _x = val1.space_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = val1.pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v7 = val1.dimensions
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = val1.variance
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = val1.velocity
        _v10 = _v9.linear
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = _v9.angular
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.acceleration
        _v13 = _v12.linear
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = _v12.angular
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = val1.pointcloud
        _v16 = _v15.header
        buff.write(_get_struct_I().pack(_v16.seq))
        _v17 = _v16.stamp
        _x = _v17
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v16.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v15
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        length = len(_v15.fields)
        buff.write(_struct_I.pack(length))
        for val3 in _v15.fields:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
        _x = _v15
        buff.write(_get_struct_B2I().pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v15.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_B().pack(_v15.is_dense))
        _v18 = val1.convex_hull
        _v19 = _v18.header
        buff.write(_get_struct_I().pack(_v19.seq))
        _v20 = _v19.stamp
        _x = _v20
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v19.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v21 = _v18.polygon
        length = len(_v21.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v21.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v22 = val1.candidate_trajectories
        buff.write(_get_struct_i().pack(_v22.id))
        length = len(_v22.lanes)
        buff.write(_struct_I.pack(length))
        for val3 in _v22.lanes:
          _v23 = val3.header
          buff.write(_get_struct_I().pack(_v23.seq))
          _v24 = _v23.stamp
          _x = _v24
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v23.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_2i().pack(_x.increment, _x.lane_id))
          length = len(val3.waypoints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.waypoints:
            _x = val4
            buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
            _v25 = val4.pose
            _v26 = _v25.header
            buff.write(_get_struct_I().pack(_v26.seq))
            _v27 = _v26.stamp
            _x = _v27
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v26.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _v28 = _v25.pose
            _v29 = _v28.position
            _x = _v29
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v30 = _v28.orientation
            _x = _v30
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _v31 = val4.twist
            _v32 = _v31.header
            buff.write(_get_struct_I().pack(_v32.seq))
            _v33 = _v32.stamp
            _x = _v33
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v32.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _v34 = _v31.twist
            _v35 = _v34.linear
            _x = _v35
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v36 = _v34.angular
            _x = _v36
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v37 = val4.dtlane
            _x = _v37
            buff.write(_get_struct_8d().pack(_x.dist, _x.dir, _x.apara, _x.r, _x.slope, _x.cant, _x.lw, _x.rw))
            buff.write(_get_struct_i().pack(val4.change_flag))
            _v38 = val4.wpstate
            _x = _v38
            buff.write(_get_struct_i5B().pack(_x.aid, _x.lanechange_state, _x.steering_state, _x.accel_state, _x.stop_state, _x.event_state))
            _x = val4
            buff.write(_get_struct_4I2fI().pack(_x.lane_id, _x.left_lane_id, _x.right_lane_id, _x.stop_line_id, _x.cost, _x.time_cost, _x.direction))
            _v39 = val4.waypoint_param
            _v40 = _v39.header
            buff.write(_get_struct_I().pack(_v40.seq))
            _v41 = _v40.stamp
            _x = _v41
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v40.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = _v39
            buff.write(_get_struct_If9i2dh2i2f().pack(_x.id, _x.weight, _x.blinker, _x.feat_proj_x, _x.feat_proj_y, _x.velocity_KPPlus, _x.velocity_KPMinus, _x.velocity_punchPlus, _x.velocity_punchMinus, _x.velocity_windowPlus, _x.velocity_windowMinus, _x.drive_stroke, _x.brake_stroke, _x.mb_pedal, _x.pause, _x.pauseGroup, _x.vgf_leafsize, _x.vgf_measurement_range))
            length = len(_v39.signals)
            buff.write(_struct_I.pack(length))
            for val6 in _v39.signals:
              _x = val6
              buff.write(_get_struct_4i4db2i().pack(_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId))
            _x = _v39
            buff.write(_get_struct_i2h4bd3f().pack(_x.curve_flag, _x.microbus_pedal, _x.microbus_angle, _x.automatic_door, _x.signal_stop_line, _x.temporary_stop_line, _x.fusion_select, _x.steer_correction, _x.lookahead_ratio, _x.minimum_lookahead_distance, _x.lookahead_ratio_magn))
            _v42 = _v39.liesse
            _v43 = _v42.header
            buff.write(_get_struct_I().pack(_v43.seq))
            _v44 = _v43.stamp
            _x = _v44
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v43.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            buff.write(_get_struct_b().pack(_v42.shift))
            length = len(val4.signals)
            buff.write(_struct_I.pack(length))
            for val5 in val4.signals:
              _x = val5
              buff.write(_get_struct_4i4db2i().pack(_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId))
          _x = val3
          buff.write(_get_struct_I3fB().pack(_x.lane_index, _x.cost, _x.closest_object_distance, _x.closest_object_velocity, _x.is_blocked))
        _x = val1
        buff.write(_get_struct_3B().pack(_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable))
        _x = val1.image_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4if().pack(_x.x, _x.y, _x.width, _x.height, _x.angle))
        _v45 = val1.roi_image
        _v46 = _v45.header
        buff.write(_get_struct_I().pack(_v46.seq))
        _v47 = _v46.stamp
        _x = _v47
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v46.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v45
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v45.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v45
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v45.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.indicator_state, _x.behavior_state))
        length = len(val1.user_defined_info)
        buff.write(_struct_I.pack(length))
        for val2 in val1.user_defined_info:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.DetectedObject()
        _v48 = val1.header
        start = end
        end += 4
        (_v48.seq,) = _get_struct_I().unpack(str[start:end])
        _v49 = _v48.stamp
        _x = _v49
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v48.frame_id = str[start:end].decode('utf-8')
        else:
          _v48.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 4
        (val1.score,) = _get_struct_f().unpack(str[start:end])
        _v50 = val1.color
        _x = _v50
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        start = end
        end += 1
        (val1.valid,) = _get_struct_B().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.space_frame = str[start:end].decode('utf-8')
        else:
          val1.space_frame = str[start:end]
        _v51 = val1.pose
        _v52 = _v51.position
        _x = _v52
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v53 = _v51.orientation
        _x = _v53
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v54 = val1.dimensions
        _x = _v54
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v55 = val1.variance
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v56 = val1.velocity
        _v57 = _v56.linear
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v58 = _v56.angular
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v59 = val1.acceleration
        _v60 = _v59.linear
        _x = _v60
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v61 = _v59.angular
        _x = _v61
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v62 = val1.pointcloud
        _v63 = _v62.header
        start = end
        end += 4
        (_v63.seq,) = _get_struct_I().unpack(str[start:end])
        _v64 = _v63.stamp
        _x = _v64
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v63.frame_id = str[start:end].decode('utf-8')
        else:
          _v63.frame_id = str[start:end]
        _x = _v62
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v62.fields = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          _x = val3
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
          _v62.fields.append(val3)
        _x = _v62
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _get_struct_B2I().unpack(str[start:end])
        _v62.is_bigendian = bool(_v62.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v62.data = str[start:end]
        start = end
        end += 1
        (_v62.is_dense,) = _get_struct_B().unpack(str[start:end])
        _v62.is_dense = bool(_v62.is_dense)
        _v65 = val1.convex_hull
        _v66 = _v65.header
        start = end
        end += 4
        (_v66.seq,) = _get_struct_I().unpack(str[start:end])
        _v67 = _v66.stamp
        _x = _v67
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v66.frame_id = str[start:end].decode('utf-8')
        else:
          _v66.frame_id = str[start:end]
        _v68 = _v65.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v68.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v68.points.append(val4)
        _v69 = val1.candidate_trajectories
        start = end
        end += 4
        (_v69.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v69.lanes = []
        for i in range(0, length):
          val3 = autoware_msgs.msg.Lane()
          _v70 = val3.header
          start = end
          end += 4
          (_v70.seq,) = _get_struct_I().unpack(str[start:end])
          _v71 = _v70.stamp
          _x = _v71
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v70.frame_id = str[start:end].decode('utf-8')
          else:
            _v70.frame_id = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.increment, _x.lane_id,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.waypoints = []
          for i in range(0, length):
            val4 = autoware_msgs.msg.Waypoint()
            _x = val4
            start = end
            end += 8
            (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
            _v72 = val4.pose
            _v73 = _v72.header
            start = end
            end += 4
            (_v73.seq,) = _get_struct_I().unpack(str[start:end])
            _v74 = _v73.stamp
            _x = _v74
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v73.frame_id = str[start:end].decode('utf-8')
            else:
              _v73.frame_id = str[start:end]
            _v75 = _v72.pose
            _v76 = _v75.position
            _x = _v76
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v77 = _v75.orientation
            _x = _v77
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v78 = val4.twist
            _v79 = _v78.header
            start = end
            end += 4
            (_v79.seq,) = _get_struct_I().unpack(str[start:end])
            _v80 = _v79.stamp
            _x = _v80
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v79.frame_id = str[start:end].decode('utf-8')
            else:
              _v79.frame_id = str[start:end]
            _v81 = _v78.twist
            _v82 = _v81.linear
            _x = _v82
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v83 = _v81.angular
            _x = _v83
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v84 = val4.dtlane
            _x = _v84
            start = end
            end += 64
            (_x.dist, _x.dir, _x.apara, _x.r, _x.slope, _x.cant, _x.lw, _x.rw,) = _get_struct_8d().unpack(str[start:end])
            start = end
            end += 4
            (val4.change_flag,) = _get_struct_i().unpack(str[start:end])
            _v85 = val4.wpstate
            _x = _v85
            start = end
            end += 9
            (_x.aid, _x.lanechange_state, _x.steering_state, _x.accel_state, _x.stop_state, _x.event_state,) = _get_struct_i5B().unpack(str[start:end])
            _x = val4
            start = end
            end += 28
            (_x.lane_id, _x.left_lane_id, _x.right_lane_id, _x.stop_line_id, _x.cost, _x.time_cost, _x.direction,) = _get_struct_4I2fI().unpack(str[start:end])
            _v86 = val4.waypoint_param
            _v87 = _v86.header
            start = end
            end += 4
            (_v87.seq,) = _get_struct_I().unpack(str[start:end])
            _v88 = _v87.stamp
            _x = _v88
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v87.frame_id = str[start:end].decode('utf-8')
            else:
              _v87.frame_id = str[start:end]
            _x = _v86
            start = end
            end += 78
            (_x.id, _x.weight, _x.blinker, _x.feat_proj_x, _x.feat_proj_y, _x.velocity_KPPlus, _x.velocity_KPMinus, _x.velocity_punchPlus, _x.velocity_punchMinus, _x.velocity_windowPlus, _x.velocity_windowMinus, _x.drive_stroke, _x.brake_stroke, _x.mb_pedal, _x.pause, _x.pauseGroup, _x.vgf_leafsize, _x.vgf_measurement_range,) = _get_struct_If9i2dh2i2f().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v86.signals = []
            for i in range(0, length):
              val6 = autoware_msgs.msg.ExtractedPosition()
              _x = val6
              start = end
              end += 57
              (_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId,) = _get_struct_4i4db2i().unpack(str[start:end])
              _v86.signals.append(val6)
            _x = _v86
            start = end
            end += 32
            (_x.curve_flag, _x.microbus_pedal, _x.microbus_angle, _x.automatic_door, _x.signal_stop_line, _x.temporary_stop_line, _x.fusion_select, _x.steer_correction, _x.lookahead_ratio, _x.minimum_lookahead_distance, _x.lookahead_ratio_magn,) = _get_struct_i2h4bd3f().unpack(str[start:end])
            _v89 = _v86.liesse
            _v90 = _v89.header
            start = end
            end += 4
            (_v90.seq,) = _get_struct_I().unpack(str[start:end])
            _v91 = _v90.stamp
            _x = _v91
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v90.frame_id = str[start:end].decode('utf-8')
            else:
              _v90.frame_id = str[start:end]
            start = end
            end += 1
            (_v89.shift,) = _get_struct_b().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.signals = []
            for i in range(0, length):
              val5 = autoware_msgs.msg.ExtractedPosition()
              _x = val5
              start = end
              end += 57
              (_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId,) = _get_struct_4i4db2i().unpack(str[start:end])
              val4.signals.append(val5)
            val3.waypoints.append(val4)
          _x = val3
          start = end
          end += 17
          (_x.lane_index, _x.cost, _x.closest_object_distance, _x.closest_object_velocity, _x.is_blocked,) = _get_struct_I3fB().unpack(str[start:end])
          val3.is_blocked = bool(val3.is_blocked)
          _v69.lanes.append(val3)
        _x = val1
        start = end
        end += 3
        (_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable,) = _get_struct_3B().unpack(str[start:end])
        val1.pose_reliable = bool(val1.pose_reliable)
        val1.velocity_reliable = bool(val1.velocity_reliable)
        val1.acceleration_reliable = bool(val1.acceleration_reliable)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.image_frame = str[start:end].decode('utf-8')
        else:
          val1.image_frame = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.x, _x.y, _x.width, _x.height, _x.angle,) = _get_struct_4if().unpack(str[start:end])
        _v92 = val1.roi_image
        _v93 = _v92.header
        start = end
        end += 4
        (_v93.seq,) = _get_struct_I().unpack(str[start:end])
        _v94 = _v93.stamp
        _x = _v94
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v93.frame_id = str[start:end].decode('utf-8')
        else:
          _v93.frame_id = str[start:end]
        _x = _v92
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v92.encoding = str[start:end].decode('utf-8')
        else:
          _v92.encoding = str[start:end]
        _x = _v92
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v92.data = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.indicator_state, _x.behavior_state,) = _get_struct_2B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.user_defined_info = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.user_defined_info.append(val2)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v95 = val1.header
        buff.write(_get_struct_I().pack(_v95.seq))
        _v96 = _v95.stamp
        _x = _v96
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v95.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_I().pack(val1.id))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_f().pack(val1.score))
        _v97 = val1.color
        _x = _v97
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        buff.write(_get_struct_B().pack(val1.valid))
        _x = val1.space_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v98 = val1.pose
        _v99 = _v98.position
        _x = _v99
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v100 = _v98.orientation
        _x = _v100
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v101 = val1.dimensions
        _x = _v101
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v102 = val1.variance
        _x = _v102
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v103 = val1.velocity
        _v104 = _v103.linear
        _x = _v104
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v105 = _v103.angular
        _x = _v105
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v106 = val1.acceleration
        _v107 = _v106.linear
        _x = _v107
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v108 = _v106.angular
        _x = _v108
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v109 = val1.pointcloud
        _v110 = _v109.header
        buff.write(_get_struct_I().pack(_v110.seq))
        _v111 = _v110.stamp
        _x = _v111
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v110.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v109
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        length = len(_v109.fields)
        buff.write(_struct_I.pack(length))
        for val3 in _v109.fields:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
        _x = _v109
        buff.write(_get_struct_B2I().pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v109.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_B().pack(_v109.is_dense))
        _v112 = val1.convex_hull
        _v113 = _v112.header
        buff.write(_get_struct_I().pack(_v113.seq))
        _v114 = _v113.stamp
        _x = _v114
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v113.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v115 = _v112.polygon
        length = len(_v115.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v115.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v116 = val1.candidate_trajectories
        buff.write(_get_struct_i().pack(_v116.id))
        length = len(_v116.lanes)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.lanes:
          _v117 = val3.header
          buff.write(_get_struct_I().pack(_v117.seq))
          _v118 = _v117.stamp
          _x = _v118
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v117.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_2i().pack(_x.increment, _x.lane_id))
          length = len(val3.waypoints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.waypoints:
            _x = val4
            buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
            _v119 = val4.pose
            _v120 = _v119.header
            buff.write(_get_struct_I().pack(_v120.seq))
            _v121 = _v120.stamp
            _x = _v121
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v120.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _v122 = _v119.pose
            _v123 = _v122.position
            _x = _v123
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v124 = _v122.orientation
            _x = _v124
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _v125 = val4.twist
            _v126 = _v125.header
            buff.write(_get_struct_I().pack(_v126.seq))
            _v127 = _v126.stamp
            _x = _v127
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v126.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _v128 = _v125.twist
            _v129 = _v128.linear
            _x = _v129
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v130 = _v128.angular
            _x = _v130
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v131 = val4.dtlane
            _x = _v131
            buff.write(_get_struct_8d().pack(_x.dist, _x.dir, _x.apara, _x.r, _x.slope, _x.cant, _x.lw, _x.rw))
            buff.write(_get_struct_i().pack(val4.change_flag))
            _v132 = val4.wpstate
            _x = _v132
            buff.write(_get_struct_i5B().pack(_x.aid, _x.lanechange_state, _x.steering_state, _x.accel_state, _x.stop_state, _x.event_state))
            _x = val4
            buff.write(_get_struct_4I2fI().pack(_x.lane_id, _x.left_lane_id, _x.right_lane_id, _x.stop_line_id, _x.cost, _x.time_cost, _x.direction))
            _v133 = val4.waypoint_param
            _v134 = _v133.header
            buff.write(_get_struct_I().pack(_v134.seq))
            _v135 = _v134.stamp
            _x = _v135
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v134.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = _v133
            buff.write(_get_struct_If9i2dh2i2f().pack(_x.id, _x.weight, _x.blinker, _x.feat_proj_x, _x.feat_proj_y, _x.velocity_KPPlus, _x.velocity_KPMinus, _x.velocity_punchPlus, _x.velocity_punchMinus, _x.velocity_windowPlus, _x.velocity_windowMinus, _x.drive_stroke, _x.brake_stroke, _x.mb_pedal, _x.pause, _x.pauseGroup, _x.vgf_leafsize, _x.vgf_measurement_range))
            length = len(_v133.signals)
            buff.write(_struct_I.pack(length))
            for val6 in _v133.signals:
              _x = val6
              buff.write(_get_struct_4i4db2i().pack(_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId))
            _x = _v133
            buff.write(_get_struct_i2h4bd3f().pack(_x.curve_flag, _x.microbus_pedal, _x.microbus_angle, _x.automatic_door, _x.signal_stop_line, _x.temporary_stop_line, _x.fusion_select, _x.steer_correction, _x.lookahead_ratio, _x.minimum_lookahead_distance, _x.lookahead_ratio_magn))
            _v136 = _v133.liesse
            _v137 = _v136.header
            buff.write(_get_struct_I().pack(_v137.seq))
            _v138 = _v137.stamp
            _x = _v138
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v137.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            buff.write(_get_struct_b().pack(_v136.shift))
            length = len(val4.signals)
            buff.write(_struct_I.pack(length))
            for val5 in val4.signals:
              _x = val5
              buff.write(_get_struct_4i4db2i().pack(_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId))
          _x = val3
          buff.write(_get_struct_I3fB().pack(_x.lane_index, _x.cost, _x.closest_object_distance, _x.closest_object_velocity, _x.is_blocked))
        _x = val1
        buff.write(_get_struct_3B().pack(_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable))
        _x = val1.image_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4if().pack(_x.x, _x.y, _x.width, _x.height, _x.angle))
        _v139 = val1.roi_image
        _v140 = _v139.header
        buff.write(_get_struct_I().pack(_v140.seq))
        _v141 = _v140.stamp
        _x = _v141
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v140.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v139
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v139.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v139
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v139.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.indicator_state, _x.behavior_state))
        length = len(val1.user_defined_info)
        buff.write(_struct_I.pack(length))
        for val2 in val1.user_defined_info:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.DetectedObject()
        _v142 = val1.header
        start = end
        end += 4
        (_v142.seq,) = _get_struct_I().unpack(str[start:end])
        _v143 = _v142.stamp
        _x = _v143
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v142.frame_id = str[start:end].decode('utf-8')
        else:
          _v142.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 4
        (val1.score,) = _get_struct_f().unpack(str[start:end])
        _v144 = val1.color
        _x = _v144
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        start = end
        end += 1
        (val1.valid,) = _get_struct_B().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.space_frame = str[start:end].decode('utf-8')
        else:
          val1.space_frame = str[start:end]
        _v145 = val1.pose
        _v146 = _v145.position
        _x = _v146
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v147 = _v145.orientation
        _x = _v147
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v148 = val1.dimensions
        _x = _v148
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v149 = val1.variance
        _x = _v149
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v150 = val1.velocity
        _v151 = _v150.linear
        _x = _v151
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v152 = _v150.angular
        _x = _v152
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v153 = val1.acceleration
        _v154 = _v153.linear
        _x = _v154
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v155 = _v153.angular
        _x = _v155
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v156 = val1.pointcloud
        _v157 = _v156.header
        start = end
        end += 4
        (_v157.seq,) = _get_struct_I().unpack(str[start:end])
        _v158 = _v157.stamp
        _x = _v158
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v157.frame_id = str[start:end].decode('utf-8')
        else:
          _v157.frame_id = str[start:end]
        _x = _v156
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v156.fields = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          _x = val3
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
          _v156.fields.append(val3)
        _x = _v156
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _get_struct_B2I().unpack(str[start:end])
        _v156.is_bigendian = bool(_v156.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v156.data = str[start:end]
        start = end
        end += 1
        (_v156.is_dense,) = _get_struct_B().unpack(str[start:end])
        _v156.is_dense = bool(_v156.is_dense)
        _v159 = val1.convex_hull
        _v160 = _v159.header
        start = end
        end += 4
        (_v160.seq,) = _get_struct_I().unpack(str[start:end])
        _v161 = _v160.stamp
        _x = _v161
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v160.frame_id = str[start:end].decode('utf-8')
        else:
          _v160.frame_id = str[start:end]
        _v162 = _v159.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v162.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v162.points.append(val4)
        _v163 = val1.candidate_trajectories
        start = end
        end += 4
        (_v163.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v163.lanes = []
        for i in range(0, length):
          val3 = autoware_msgs.msg.Lane()
          _v164 = val3.header
          start = end
          end += 4
          (_v164.seq,) = _get_struct_I().unpack(str[start:end])
          _v165 = _v164.stamp
          _x = _v165
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v164.frame_id = str[start:end].decode('utf-8')
          else:
            _v164.frame_id = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.increment, _x.lane_id,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.waypoints = []
          for i in range(0, length):
            val4 = autoware_msgs.msg.Waypoint()
            _x = val4
            start = end
            end += 8
            (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
            _v166 = val4.pose
            _v167 = _v166.header
            start = end
            end += 4
            (_v167.seq,) = _get_struct_I().unpack(str[start:end])
            _v168 = _v167.stamp
            _x = _v168
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v167.frame_id = str[start:end].decode('utf-8')
            else:
              _v167.frame_id = str[start:end]
            _v169 = _v166.pose
            _v170 = _v169.position
            _x = _v170
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v171 = _v169.orientation
            _x = _v171
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v172 = val4.twist
            _v173 = _v172.header
            start = end
            end += 4
            (_v173.seq,) = _get_struct_I().unpack(str[start:end])
            _v174 = _v173.stamp
            _x = _v174
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v173.frame_id = str[start:end].decode('utf-8')
            else:
              _v173.frame_id = str[start:end]
            _v175 = _v172.twist
            _v176 = _v175.linear
            _x = _v176
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v177 = _v175.angular
            _x = _v177
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v178 = val4.dtlane
            _x = _v178
            start = end
            end += 64
            (_x.dist, _x.dir, _x.apara, _x.r, _x.slope, _x.cant, _x.lw, _x.rw,) = _get_struct_8d().unpack(str[start:end])
            start = end
            end += 4
            (val4.change_flag,) = _get_struct_i().unpack(str[start:end])
            _v179 = val4.wpstate
            _x = _v179
            start = end
            end += 9
            (_x.aid, _x.lanechange_state, _x.steering_state, _x.accel_state, _x.stop_state, _x.event_state,) = _get_struct_i5B().unpack(str[start:end])
            _x = val4
            start = end
            end += 28
            (_x.lane_id, _x.left_lane_id, _x.right_lane_id, _x.stop_line_id, _x.cost, _x.time_cost, _x.direction,) = _get_struct_4I2fI().unpack(str[start:end])
            _v180 = val4.waypoint_param
            _v181 = _v180.header
            start = end
            end += 4
            (_v181.seq,) = _get_struct_I().unpack(str[start:end])
            _v182 = _v181.stamp
            _x = _v182
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v181.frame_id = str[start:end].decode('utf-8')
            else:
              _v181.frame_id = str[start:end]
            _x = _v180
            start = end
            end += 78
            (_x.id, _x.weight, _x.blinker, _x.feat_proj_x, _x.feat_proj_y, _x.velocity_KPPlus, _x.velocity_KPMinus, _x.velocity_punchPlus, _x.velocity_punchMinus, _x.velocity_windowPlus, _x.velocity_windowMinus, _x.drive_stroke, _x.brake_stroke, _x.mb_pedal, _x.pause, _x.pauseGroup, _x.vgf_leafsize, _x.vgf_measurement_range,) = _get_struct_If9i2dh2i2f().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v180.signals = []
            for i in range(0, length):
              val6 = autoware_msgs.msg.ExtractedPosition()
              _x = val6
              start = end
              end += 57
              (_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId,) = _get_struct_4i4db2i().unpack(str[start:end])
              _v180.signals.append(val6)
            _x = _v180
            start = end
            end += 32
            (_x.curve_flag, _x.microbus_pedal, _x.microbus_angle, _x.automatic_door, _x.signal_stop_line, _x.temporary_stop_line, _x.fusion_select, _x.steer_correction, _x.lookahead_ratio, _x.minimum_lookahead_distance, _x.lookahead_ratio_magn,) = _get_struct_i2h4bd3f().unpack(str[start:end])
            _v183 = _v180.liesse
            _v184 = _v183.header
            start = end
            end += 4
            (_v184.seq,) = _get_struct_I().unpack(str[start:end])
            _v185 = _v184.stamp
            _x = _v185
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v184.frame_id = str[start:end].decode('utf-8')
            else:
              _v184.frame_id = str[start:end]
            start = end
            end += 1
            (_v183.shift,) = _get_struct_b().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.signals = []
            for i in range(0, length):
              val5 = autoware_msgs.msg.ExtractedPosition()
              _x = val5
              start = end
              end += 57
              (_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId,) = _get_struct_4i4db2i().unpack(str[start:end])
              val4.signals.append(val5)
            val3.waypoints.append(val4)
          _x = val3
          start = end
          end += 17
          (_x.lane_index, _x.cost, _x.closest_object_distance, _x.closest_object_velocity, _x.is_blocked,) = _get_struct_I3fB().unpack(str[start:end])
          val3.is_blocked = bool(val3.is_blocked)
          _v163.lanes.append(val3)
        _x = val1
        start = end
        end += 3
        (_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable,) = _get_struct_3B().unpack(str[start:end])
        val1.pose_reliable = bool(val1.pose_reliable)
        val1.velocity_reliable = bool(val1.velocity_reliable)
        val1.acceleration_reliable = bool(val1.acceleration_reliable)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.image_frame = str[start:end].decode('utf-8')
        else:
          val1.image_frame = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.x, _x.y, _x.width, _x.height, _x.angle,) = _get_struct_4if().unpack(str[start:end])
        _v186 = val1.roi_image
        _v187 = _v186.header
        start = end
        end += 4
        (_v187.seq,) = _get_struct_I().unpack(str[start:end])
        _v188 = _v187.stamp
        _x = _v188
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v187.frame_id = str[start:end].decode('utf-8')
        else:
          _v187.frame_id = str[start:end]
        _x = _v186
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v186.encoding = str[start:end].decode('utf-8')
        else:
          _v186.encoding = str[start:end]
        _x = _v186
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v186.data = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.indicator_state, _x.behavior_state,) = _get_struct_2B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.user_defined_info = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.user_defined_info.append(val2)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_4if = None
def _get_struct_4if():
    global _struct_4if
    if _struct_4if is None:
        _struct_4if = struct.Struct("<4if")
    return _struct_4if
_struct_4I2fI = None
def _get_struct_4I2fI():
    global _struct_4I2fI
    if _struct_4I2fI is None:
        _struct_4I2fI = struct.Struct("<4I2fI")
    return _struct_4I2fI
_struct_4i4db2i = None
def _get_struct_4i4db2i():
    global _struct_4i4db2i
    if _struct_4i4db2i is None:
        _struct_4i4db2i = struct.Struct("<4i4db2i")
    return _struct_4i4db2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_I3fB = None
def _get_struct_I3fB():
    global _struct_I3fB
    if _struct_I3fB is None:
        _struct_I3fB = struct.Struct("<I3fB")
    return _struct_I3fB
_struct_i5B = None
def _get_struct_i5B():
    global _struct_i5B
    if _struct_i5B is None:
        _struct_i5B = struct.Struct("<i5B")
    return _struct_i5B
_struct_If9i2dh2i2f = None
def _get_struct_If9i2dh2i2f():
    global _struct_If9i2dh2i2f
    if _struct_If9i2dh2i2f is None:
        _struct_If9i2dh2i2f = struct.Struct("<If9i2dh2i2f")
    return _struct_If9i2dh2i2f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_i2h4bd3f = None
def _get_struct_i2h4bd3f():
    global _struct_i2h4bd3f
    if _struct_i2h4bd3f is None:
        _struct_i2h4bd3f = struct.Struct("<i2h4bd3f")
    return _struct_i2h4bd3f
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
