# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_msgs/NdtPoseAndRTKPose.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import autoware_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class NdtPoseAndRTKPose(genpy.Message):
  _md5sum = "04033cc2ccf6e18ada42ff3baad16dfb"
  _type = "autoware_msgs/NdtPoseAndRTKPose"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
geometry_msgs/PoseStamped ndt_pose
geometry_msgs/PoseStamped ndt_localizer_pose
geometry_msgs/TwistStamped ndt_twist
geometry_msgs/PoseStamped RTK_pose
geometry_msgs/PoseStamped RTK_localizer_pose
autoware_msgs/GnssStandardDeviation RTK_standard_deviation
autoware_msgs/NDTStat ndt_stat

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: autoware_msgs/GnssStandardDeviation
Header header
float64 lat_std
float64 lon_std
float64 alt_std

================================================================================
MSG: autoware_msgs/NDTStat
Header header
float32 exe_time
int32 iteration
float32 score
float32 velocity
float32 acceleration
int32 use_predict_pose
"""
  __slots__ = ['header','ndt_pose','ndt_localizer_pose','ndt_twist','RTK_pose','RTK_localizer_pose','RTK_standard_deviation','ndt_stat']
  _slot_types = ['std_msgs/Header','geometry_msgs/PoseStamped','geometry_msgs/PoseStamped','geometry_msgs/TwistStamped','geometry_msgs/PoseStamped','geometry_msgs/PoseStamped','autoware_msgs/GnssStandardDeviation','autoware_msgs/NDTStat']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ndt_pose,ndt_localizer_pose,ndt_twist,RTK_pose,RTK_localizer_pose,RTK_standard_deviation,ndt_stat

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NdtPoseAndRTKPose, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ndt_pose is None:
        self.ndt_pose = geometry_msgs.msg.PoseStamped()
      if self.ndt_localizer_pose is None:
        self.ndt_localizer_pose = geometry_msgs.msg.PoseStamped()
      if self.ndt_twist is None:
        self.ndt_twist = geometry_msgs.msg.TwistStamped()
      if self.RTK_pose is None:
        self.RTK_pose = geometry_msgs.msg.PoseStamped()
      if self.RTK_localizer_pose is None:
        self.RTK_localizer_pose = geometry_msgs.msg.PoseStamped()
      if self.RTK_standard_deviation is None:
        self.RTK_standard_deviation = autoware_msgs.msg.GnssStandardDeviation()
      if self.ndt_stat is None:
        self.ndt_stat = autoware_msgs.msg.NDTStat()
    else:
      self.header = std_msgs.msg.Header()
      self.ndt_pose = geometry_msgs.msg.PoseStamped()
      self.ndt_localizer_pose = geometry_msgs.msg.PoseStamped()
      self.ndt_twist = geometry_msgs.msg.TwistStamped()
      self.RTK_pose = geometry_msgs.msg.PoseStamped()
      self.RTK_localizer_pose = geometry_msgs.msg.PoseStamped()
      self.RTK_standard_deviation = autoware_msgs.msg.GnssStandardDeviation()
      self.ndt_stat = autoware_msgs.msg.NDTStat()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.ndt_pose.header.seq, _x.ndt_pose.header.stamp.secs, _x.ndt_pose.header.stamp.nsecs))
      _x = self.ndt_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.ndt_pose.pose.position.x, _x.ndt_pose.pose.position.y, _x.ndt_pose.pose.position.z, _x.ndt_pose.pose.orientation.x, _x.ndt_pose.pose.orientation.y, _x.ndt_pose.pose.orientation.z, _x.ndt_pose.pose.orientation.w, _x.ndt_localizer_pose.header.seq, _x.ndt_localizer_pose.header.stamp.secs, _x.ndt_localizer_pose.header.stamp.nsecs))
      _x = self.ndt_localizer_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.ndt_localizer_pose.pose.position.x, _x.ndt_localizer_pose.pose.position.y, _x.ndt_localizer_pose.pose.position.z, _x.ndt_localizer_pose.pose.orientation.x, _x.ndt_localizer_pose.pose.orientation.y, _x.ndt_localizer_pose.pose.orientation.z, _x.ndt_localizer_pose.pose.orientation.w, _x.ndt_twist.header.seq, _x.ndt_twist.header.stamp.secs, _x.ndt_twist.header.stamp.nsecs))
      _x = self.ndt_twist.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d3I().pack(_x.ndt_twist.twist.linear.x, _x.ndt_twist.twist.linear.y, _x.ndt_twist.twist.linear.z, _x.ndt_twist.twist.angular.x, _x.ndt_twist.twist.angular.y, _x.ndt_twist.twist.angular.z, _x.RTK_pose.header.seq, _x.RTK_pose.header.stamp.secs, _x.RTK_pose.header.stamp.nsecs))
      _x = self.RTK_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.RTK_pose.pose.position.x, _x.RTK_pose.pose.position.y, _x.RTK_pose.pose.position.z, _x.RTK_pose.pose.orientation.x, _x.RTK_pose.pose.orientation.y, _x.RTK_pose.pose.orientation.z, _x.RTK_pose.pose.orientation.w, _x.RTK_localizer_pose.header.seq, _x.RTK_localizer_pose.header.stamp.secs, _x.RTK_localizer_pose.header.stamp.nsecs))
      _x = self.RTK_localizer_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.RTK_localizer_pose.pose.position.x, _x.RTK_localizer_pose.pose.position.y, _x.RTK_localizer_pose.pose.position.z, _x.RTK_localizer_pose.pose.orientation.x, _x.RTK_localizer_pose.pose.orientation.y, _x.RTK_localizer_pose.pose.orientation.z, _x.RTK_localizer_pose.pose.orientation.w, _x.RTK_standard_deviation.header.seq, _x.RTK_standard_deviation.header.stamp.secs, _x.RTK_standard_deviation.header.stamp.nsecs))
      _x = self.RTK_standard_deviation.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.RTK_standard_deviation.lat_std, _x.RTK_standard_deviation.lon_std, _x.RTK_standard_deviation.alt_std, _x.ndt_stat.header.seq, _x.ndt_stat.header.stamp.secs, _x.ndt_stat.header.stamp.nsecs))
      _x = self.ndt_stat.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fi3fi().pack(_x.ndt_stat.exe_time, _x.ndt_stat.iteration, _x.ndt_stat.score, _x.ndt_stat.velocity, _x.ndt_stat.acceleration, _x.ndt_stat.use_predict_pose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ndt_pose is None:
        self.ndt_pose = geometry_msgs.msg.PoseStamped()
      if self.ndt_localizer_pose is None:
        self.ndt_localizer_pose = geometry_msgs.msg.PoseStamped()
      if self.ndt_twist is None:
        self.ndt_twist = geometry_msgs.msg.TwistStamped()
      if self.RTK_pose is None:
        self.RTK_pose = geometry_msgs.msg.PoseStamped()
      if self.RTK_localizer_pose is None:
        self.RTK_localizer_pose = geometry_msgs.msg.PoseStamped()
      if self.RTK_standard_deviation is None:
        self.RTK_standard_deviation = autoware_msgs.msg.GnssStandardDeviation()
      if self.ndt_stat is None:
        self.ndt_stat = autoware_msgs.msg.NDTStat()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ndt_pose.header.seq, _x.ndt_pose.header.stamp.secs, _x.ndt_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ndt_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ndt_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.ndt_pose.pose.position.x, _x.ndt_pose.pose.position.y, _x.ndt_pose.pose.position.z, _x.ndt_pose.pose.orientation.x, _x.ndt_pose.pose.orientation.y, _x.ndt_pose.pose.orientation.z, _x.ndt_pose.pose.orientation.w, _x.ndt_localizer_pose.header.seq, _x.ndt_localizer_pose.header.stamp.secs, _x.ndt_localizer_pose.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ndt_localizer_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ndt_localizer_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.ndt_localizer_pose.pose.position.x, _x.ndt_localizer_pose.pose.position.y, _x.ndt_localizer_pose.pose.position.z, _x.ndt_localizer_pose.pose.orientation.x, _x.ndt_localizer_pose.pose.orientation.y, _x.ndt_localizer_pose.pose.orientation.z, _x.ndt_localizer_pose.pose.orientation.w, _x.ndt_twist.header.seq, _x.ndt_twist.header.stamp.secs, _x.ndt_twist.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ndt_twist.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ndt_twist.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.ndt_twist.twist.linear.x, _x.ndt_twist.twist.linear.y, _x.ndt_twist.twist.linear.z, _x.ndt_twist.twist.angular.x, _x.ndt_twist.twist.angular.y, _x.ndt_twist.twist.angular.z, _x.RTK_pose.header.seq, _x.RTK_pose.header.stamp.secs, _x.RTK_pose.header.stamp.nsecs,) = _get_struct_6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.RTK_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.RTK_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.RTK_pose.pose.position.x, _x.RTK_pose.pose.position.y, _x.RTK_pose.pose.position.z, _x.RTK_pose.pose.orientation.x, _x.RTK_pose.pose.orientation.y, _x.RTK_pose.pose.orientation.z, _x.RTK_pose.pose.orientation.w, _x.RTK_localizer_pose.header.seq, _x.RTK_localizer_pose.header.stamp.secs, _x.RTK_localizer_pose.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.RTK_localizer_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.RTK_localizer_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.RTK_localizer_pose.pose.position.x, _x.RTK_localizer_pose.pose.position.y, _x.RTK_localizer_pose.pose.position.z, _x.RTK_localizer_pose.pose.orientation.x, _x.RTK_localizer_pose.pose.orientation.y, _x.RTK_localizer_pose.pose.orientation.z, _x.RTK_localizer_pose.pose.orientation.w, _x.RTK_standard_deviation.header.seq, _x.RTK_standard_deviation.header.stamp.secs, _x.RTK_standard_deviation.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.RTK_standard_deviation.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.RTK_standard_deviation.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.RTK_standard_deviation.lat_std, _x.RTK_standard_deviation.lon_std, _x.RTK_standard_deviation.alt_std, _x.ndt_stat.header.seq, _x.ndt_stat.header.stamp.secs, _x.ndt_stat.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ndt_stat.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ndt_stat.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.ndt_stat.exe_time, _x.ndt_stat.iteration, _x.ndt_stat.score, _x.ndt_stat.velocity, _x.ndt_stat.acceleration, _x.ndt_stat.use_predict_pose,) = _get_struct_fi3fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.ndt_pose.header.seq, _x.ndt_pose.header.stamp.secs, _x.ndt_pose.header.stamp.nsecs))
      _x = self.ndt_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.ndt_pose.pose.position.x, _x.ndt_pose.pose.position.y, _x.ndt_pose.pose.position.z, _x.ndt_pose.pose.orientation.x, _x.ndt_pose.pose.orientation.y, _x.ndt_pose.pose.orientation.z, _x.ndt_pose.pose.orientation.w, _x.ndt_localizer_pose.header.seq, _x.ndt_localizer_pose.header.stamp.secs, _x.ndt_localizer_pose.header.stamp.nsecs))
      _x = self.ndt_localizer_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.ndt_localizer_pose.pose.position.x, _x.ndt_localizer_pose.pose.position.y, _x.ndt_localizer_pose.pose.position.z, _x.ndt_localizer_pose.pose.orientation.x, _x.ndt_localizer_pose.pose.orientation.y, _x.ndt_localizer_pose.pose.orientation.z, _x.ndt_localizer_pose.pose.orientation.w, _x.ndt_twist.header.seq, _x.ndt_twist.header.stamp.secs, _x.ndt_twist.header.stamp.nsecs))
      _x = self.ndt_twist.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d3I().pack(_x.ndt_twist.twist.linear.x, _x.ndt_twist.twist.linear.y, _x.ndt_twist.twist.linear.z, _x.ndt_twist.twist.angular.x, _x.ndt_twist.twist.angular.y, _x.ndt_twist.twist.angular.z, _x.RTK_pose.header.seq, _x.RTK_pose.header.stamp.secs, _x.RTK_pose.header.stamp.nsecs))
      _x = self.RTK_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.RTK_pose.pose.position.x, _x.RTK_pose.pose.position.y, _x.RTK_pose.pose.position.z, _x.RTK_pose.pose.orientation.x, _x.RTK_pose.pose.orientation.y, _x.RTK_pose.pose.orientation.z, _x.RTK_pose.pose.orientation.w, _x.RTK_localizer_pose.header.seq, _x.RTK_localizer_pose.header.stamp.secs, _x.RTK_localizer_pose.header.stamp.nsecs))
      _x = self.RTK_localizer_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.RTK_localizer_pose.pose.position.x, _x.RTK_localizer_pose.pose.position.y, _x.RTK_localizer_pose.pose.position.z, _x.RTK_localizer_pose.pose.orientation.x, _x.RTK_localizer_pose.pose.orientation.y, _x.RTK_localizer_pose.pose.orientation.z, _x.RTK_localizer_pose.pose.orientation.w, _x.RTK_standard_deviation.header.seq, _x.RTK_standard_deviation.header.stamp.secs, _x.RTK_standard_deviation.header.stamp.nsecs))
      _x = self.RTK_standard_deviation.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.RTK_standard_deviation.lat_std, _x.RTK_standard_deviation.lon_std, _x.RTK_standard_deviation.alt_std, _x.ndt_stat.header.seq, _x.ndt_stat.header.stamp.secs, _x.ndt_stat.header.stamp.nsecs))
      _x = self.ndt_stat.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fi3fi().pack(_x.ndt_stat.exe_time, _x.ndt_stat.iteration, _x.ndt_stat.score, _x.ndt_stat.velocity, _x.ndt_stat.acceleration, _x.ndt_stat.use_predict_pose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ndt_pose is None:
        self.ndt_pose = geometry_msgs.msg.PoseStamped()
      if self.ndt_localizer_pose is None:
        self.ndt_localizer_pose = geometry_msgs.msg.PoseStamped()
      if self.ndt_twist is None:
        self.ndt_twist = geometry_msgs.msg.TwistStamped()
      if self.RTK_pose is None:
        self.RTK_pose = geometry_msgs.msg.PoseStamped()
      if self.RTK_localizer_pose is None:
        self.RTK_localizer_pose = geometry_msgs.msg.PoseStamped()
      if self.RTK_standard_deviation is None:
        self.RTK_standard_deviation = autoware_msgs.msg.GnssStandardDeviation()
      if self.ndt_stat is None:
        self.ndt_stat = autoware_msgs.msg.NDTStat()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ndt_pose.header.seq, _x.ndt_pose.header.stamp.secs, _x.ndt_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ndt_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ndt_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.ndt_pose.pose.position.x, _x.ndt_pose.pose.position.y, _x.ndt_pose.pose.position.z, _x.ndt_pose.pose.orientation.x, _x.ndt_pose.pose.orientation.y, _x.ndt_pose.pose.orientation.z, _x.ndt_pose.pose.orientation.w, _x.ndt_localizer_pose.header.seq, _x.ndt_localizer_pose.header.stamp.secs, _x.ndt_localizer_pose.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ndt_localizer_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ndt_localizer_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.ndt_localizer_pose.pose.position.x, _x.ndt_localizer_pose.pose.position.y, _x.ndt_localizer_pose.pose.position.z, _x.ndt_localizer_pose.pose.orientation.x, _x.ndt_localizer_pose.pose.orientation.y, _x.ndt_localizer_pose.pose.orientation.z, _x.ndt_localizer_pose.pose.orientation.w, _x.ndt_twist.header.seq, _x.ndt_twist.header.stamp.secs, _x.ndt_twist.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ndt_twist.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ndt_twist.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.ndt_twist.twist.linear.x, _x.ndt_twist.twist.linear.y, _x.ndt_twist.twist.linear.z, _x.ndt_twist.twist.angular.x, _x.ndt_twist.twist.angular.y, _x.ndt_twist.twist.angular.z, _x.RTK_pose.header.seq, _x.RTK_pose.header.stamp.secs, _x.RTK_pose.header.stamp.nsecs,) = _get_struct_6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.RTK_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.RTK_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.RTK_pose.pose.position.x, _x.RTK_pose.pose.position.y, _x.RTK_pose.pose.position.z, _x.RTK_pose.pose.orientation.x, _x.RTK_pose.pose.orientation.y, _x.RTK_pose.pose.orientation.z, _x.RTK_pose.pose.orientation.w, _x.RTK_localizer_pose.header.seq, _x.RTK_localizer_pose.header.stamp.secs, _x.RTK_localizer_pose.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.RTK_localizer_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.RTK_localizer_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.RTK_localizer_pose.pose.position.x, _x.RTK_localizer_pose.pose.position.y, _x.RTK_localizer_pose.pose.position.z, _x.RTK_localizer_pose.pose.orientation.x, _x.RTK_localizer_pose.pose.orientation.y, _x.RTK_localizer_pose.pose.orientation.z, _x.RTK_localizer_pose.pose.orientation.w, _x.RTK_standard_deviation.header.seq, _x.RTK_standard_deviation.header.stamp.secs, _x.RTK_standard_deviation.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.RTK_standard_deviation.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.RTK_standard_deviation.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.RTK_standard_deviation.lat_std, _x.RTK_standard_deviation.lon_std, _x.RTK_standard_deviation.alt_std, _x.ndt_stat.header.seq, _x.ndt_stat.header.stamp.secs, _x.ndt_stat.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ndt_stat.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ndt_stat.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.ndt_stat.exe_time, _x.ndt_stat.iteration, _x.ndt_stat.score, _x.ndt_stat.velocity, _x.ndt_stat.acceleration, _x.ndt_stat.use_predict_pose,) = _get_struct_fi3fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d3I = None
def _get_struct_3d3I():
    global _struct_3d3I
    if _struct_3d3I is None:
        _struct_3d3I = struct.Struct("<3d3I")
    return _struct_3d3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_fi3fi = None
def _get_struct_fi3fi():
    global _struct_fi3fi
    if _struct_fi3fi is None:
        _struct_fi3fi = struct.Struct("<fi3fi")
    return _struct_fi3fi
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_6d3I = None
def _get_struct_6d3I():
    global _struct_6d3I
    if _struct_6d3I is None:
        _struct_6d3I = struct.Struct("<6d3I")
    return _struct_6d3I
