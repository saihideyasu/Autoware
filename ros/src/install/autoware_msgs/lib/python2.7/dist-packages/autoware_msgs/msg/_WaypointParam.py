# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_msgs/WaypointParam.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import autoware_msgs.msg
import std_msgs.msg

class WaypointParam(genpy.Message):
  _md5sum = "3147c8953e95938db478b50912f9ec54"
  _type = "autoware_msgs/WaypointParam"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
uint32 id
float32 weight
int32 blinker
int32 feat_proj_x
int32 feat_proj_y
int32 velocity_KPPlus
int32 velocity_KPMinus
int32 velocity_punchPlus
int32 velocity_punchMinus
int32 velocity_windowPlus
int32 velocity_windowMinus
float64 drive_stroke
float64 brake_stroke
int16 mb_pedal
int32 pause
int32 pauseGroup
float32 vgf_leafsize
float32 vgf_measurement_range
ExtractedPosition[] signals
int32 curve_flag
int16 microbus_pedal
int16 microbus_angle
int8 automatic_door
int8 signal_stop_line
int8 temporary_stop_line
int8 fusion_select
float64 steer_correction
float32 lookahead_ratio
float32 minimum_lookahead_distance
float32 lookahead_ratio_magn
LiesseXZB70MParam liesse

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: autoware_msgs/ExtractedPosition
# This message defines the information required to describe a lamp (bulb)
# in a traffic signal, according to the information extracted from the ADAS Map
# and the extrinsic camera calibration

int32 signalId  # Traffic Signal Lamp ID
int32 u         # Lamp ROI x in image coords
int32 v         # Lamp ROI y in image coords
int32 radius    # Lamp Radius
float64 x       # X position in map coordinates
float64 y       # Y position in map coordinates
float64 z       # Z position in map coordinates
float64 hang    # Azimuth "Horizontal Angle"
int8 type       # Lamp Type (red, yellow, green, ...)
int32 linkId    # Closest LinkID (lane) in VectorMap
int32 plId      # PoleID to which this Lamp belongs to

================================================================================
MSG: autoware_msgs/LiesseXZB70MParam
Header header
int8 SHIFT_P = 0
int8 SHIFT_R = 1
int8 SHIFT_N = 2
int8 SHIFT_D = 3
int8 SHIFT_4 = 4
int8 SHIFT_L = 5
int8 shift
"""
  __slots__ = ['header','id','weight','blinker','feat_proj_x','feat_proj_y','velocity_KPPlus','velocity_KPMinus','velocity_punchPlus','velocity_punchMinus','velocity_windowPlus','velocity_windowMinus','drive_stroke','brake_stroke','mb_pedal','pause','pauseGroup','vgf_leafsize','vgf_measurement_range','signals','curve_flag','microbus_pedal','microbus_angle','automatic_door','signal_stop_line','temporary_stop_line','fusion_select','steer_correction','lookahead_ratio','minimum_lookahead_distance','lookahead_ratio_magn','liesse']
  _slot_types = ['std_msgs/Header','uint32','float32','int32','int32','int32','int32','int32','int32','int32','int32','int32','float64','float64','int16','int32','int32','float32','float32','autoware_msgs/ExtractedPosition[]','int32','int16','int16','int8','int8','int8','int8','float64','float32','float32','float32','autoware_msgs/LiesseXZB70MParam']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,weight,blinker,feat_proj_x,feat_proj_y,velocity_KPPlus,velocity_KPMinus,velocity_punchPlus,velocity_punchMinus,velocity_windowPlus,velocity_windowMinus,drive_stroke,brake_stroke,mb_pedal,pause,pauseGroup,vgf_leafsize,vgf_measurement_range,signals,curve_flag,microbus_pedal,microbus_angle,automatic_door,signal_stop_line,temporary_stop_line,fusion_select,steer_correction,lookahead_ratio,minimum_lookahead_distance,lookahead_ratio_magn,liesse

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WaypointParam, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.weight is None:
        self.weight = 0.
      if self.blinker is None:
        self.blinker = 0
      if self.feat_proj_x is None:
        self.feat_proj_x = 0
      if self.feat_proj_y is None:
        self.feat_proj_y = 0
      if self.velocity_KPPlus is None:
        self.velocity_KPPlus = 0
      if self.velocity_KPMinus is None:
        self.velocity_KPMinus = 0
      if self.velocity_punchPlus is None:
        self.velocity_punchPlus = 0
      if self.velocity_punchMinus is None:
        self.velocity_punchMinus = 0
      if self.velocity_windowPlus is None:
        self.velocity_windowPlus = 0
      if self.velocity_windowMinus is None:
        self.velocity_windowMinus = 0
      if self.drive_stroke is None:
        self.drive_stroke = 0.
      if self.brake_stroke is None:
        self.brake_stroke = 0.
      if self.mb_pedal is None:
        self.mb_pedal = 0
      if self.pause is None:
        self.pause = 0
      if self.pauseGroup is None:
        self.pauseGroup = 0
      if self.vgf_leafsize is None:
        self.vgf_leafsize = 0.
      if self.vgf_measurement_range is None:
        self.vgf_measurement_range = 0.
      if self.signals is None:
        self.signals = []
      if self.curve_flag is None:
        self.curve_flag = 0
      if self.microbus_pedal is None:
        self.microbus_pedal = 0
      if self.microbus_angle is None:
        self.microbus_angle = 0
      if self.automatic_door is None:
        self.automatic_door = 0
      if self.signal_stop_line is None:
        self.signal_stop_line = 0
      if self.temporary_stop_line is None:
        self.temporary_stop_line = 0
      if self.fusion_select is None:
        self.fusion_select = 0
      if self.steer_correction is None:
        self.steer_correction = 0.
      if self.lookahead_ratio is None:
        self.lookahead_ratio = 0.
      if self.minimum_lookahead_distance is None:
        self.minimum_lookahead_distance = 0.
      if self.lookahead_ratio_magn is None:
        self.lookahead_ratio_magn = 0.
      if self.liesse is None:
        self.liesse = autoware_msgs.msg.LiesseXZB70MParam()
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.weight = 0.
      self.blinker = 0
      self.feat_proj_x = 0
      self.feat_proj_y = 0
      self.velocity_KPPlus = 0
      self.velocity_KPMinus = 0
      self.velocity_punchPlus = 0
      self.velocity_punchMinus = 0
      self.velocity_windowPlus = 0
      self.velocity_windowMinus = 0
      self.drive_stroke = 0.
      self.brake_stroke = 0.
      self.mb_pedal = 0
      self.pause = 0
      self.pauseGroup = 0
      self.vgf_leafsize = 0.
      self.vgf_measurement_range = 0.
      self.signals = []
      self.curve_flag = 0
      self.microbus_pedal = 0
      self.microbus_angle = 0
      self.automatic_door = 0
      self.signal_stop_line = 0
      self.temporary_stop_line = 0
      self.fusion_select = 0
      self.steer_correction = 0.
      self.lookahead_ratio = 0.
      self.minimum_lookahead_distance = 0.
      self.lookahead_ratio_magn = 0.
      self.liesse = autoware_msgs.msg.LiesseXZB70MParam()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_If9i2dh2i2f().pack(_x.id, _x.weight, _x.blinker, _x.feat_proj_x, _x.feat_proj_y, _x.velocity_KPPlus, _x.velocity_KPMinus, _x.velocity_punchPlus, _x.velocity_punchMinus, _x.velocity_windowPlus, _x.velocity_windowMinus, _x.drive_stroke, _x.brake_stroke, _x.mb_pedal, _x.pause, _x.pauseGroup, _x.vgf_leafsize, _x.vgf_measurement_range))
      length = len(self.signals)
      buff.write(_struct_I.pack(length))
      for val1 in self.signals:
        _x = val1
        buff.write(_get_struct_4i4db2i().pack(_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId))
      _x = self
      buff.write(_get_struct_i2h4bd3f3I().pack(_x.curve_flag, _x.microbus_pedal, _x.microbus_angle, _x.automatic_door, _x.signal_stop_line, _x.temporary_stop_line, _x.fusion_select, _x.steer_correction, _x.lookahead_ratio, _x.minimum_lookahead_distance, _x.lookahead_ratio_magn, _x.liesse.header.seq, _x.liesse.header.stamp.secs, _x.liesse.header.stamp.nsecs))
      _x = self.liesse.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.liesse.shift))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.signals is None:
        self.signals = None
      if self.liesse is None:
        self.liesse = autoware_msgs.msg.LiesseXZB70MParam()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 78
      (_x.id, _x.weight, _x.blinker, _x.feat_proj_x, _x.feat_proj_y, _x.velocity_KPPlus, _x.velocity_KPMinus, _x.velocity_punchPlus, _x.velocity_punchMinus, _x.velocity_windowPlus, _x.velocity_windowMinus, _x.drive_stroke, _x.brake_stroke, _x.mb_pedal, _x.pause, _x.pauseGroup, _x.vgf_leafsize, _x.vgf_measurement_range,) = _get_struct_If9i2dh2i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.signals = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.ExtractedPosition()
        _x = val1
        start = end
        end += 57
        (_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId,) = _get_struct_4i4db2i().unpack(str[start:end])
        self.signals.append(val1)
      _x = self
      start = end
      end += 44
      (_x.curve_flag, _x.microbus_pedal, _x.microbus_angle, _x.automatic_door, _x.signal_stop_line, _x.temporary_stop_line, _x.fusion_select, _x.steer_correction, _x.lookahead_ratio, _x.minimum_lookahead_distance, _x.lookahead_ratio_magn, _x.liesse.header.seq, _x.liesse.header.stamp.secs, _x.liesse.header.stamp.nsecs,) = _get_struct_i2h4bd3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.liesse.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.liesse.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.liesse.shift,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_If9i2dh2i2f().pack(_x.id, _x.weight, _x.blinker, _x.feat_proj_x, _x.feat_proj_y, _x.velocity_KPPlus, _x.velocity_KPMinus, _x.velocity_punchPlus, _x.velocity_punchMinus, _x.velocity_windowPlus, _x.velocity_windowMinus, _x.drive_stroke, _x.brake_stroke, _x.mb_pedal, _x.pause, _x.pauseGroup, _x.vgf_leafsize, _x.vgf_measurement_range))
      length = len(self.signals)
      buff.write(_struct_I.pack(length))
      for val1 in self.signals:
        _x = val1
        buff.write(_get_struct_4i4db2i().pack(_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId))
      _x = self
      buff.write(_get_struct_i2h4bd3f3I().pack(_x.curve_flag, _x.microbus_pedal, _x.microbus_angle, _x.automatic_door, _x.signal_stop_line, _x.temporary_stop_line, _x.fusion_select, _x.steer_correction, _x.lookahead_ratio, _x.minimum_lookahead_distance, _x.lookahead_ratio_magn, _x.liesse.header.seq, _x.liesse.header.stamp.secs, _x.liesse.header.stamp.nsecs))
      _x = self.liesse.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.liesse.shift))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.signals is None:
        self.signals = None
      if self.liesse is None:
        self.liesse = autoware_msgs.msg.LiesseXZB70MParam()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 78
      (_x.id, _x.weight, _x.blinker, _x.feat_proj_x, _x.feat_proj_y, _x.velocity_KPPlus, _x.velocity_KPMinus, _x.velocity_punchPlus, _x.velocity_punchMinus, _x.velocity_windowPlus, _x.velocity_windowMinus, _x.drive_stroke, _x.brake_stroke, _x.mb_pedal, _x.pause, _x.pauseGroup, _x.vgf_leafsize, _x.vgf_measurement_range,) = _get_struct_If9i2dh2i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.signals = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.ExtractedPosition()
        _x = val1
        start = end
        end += 57
        (_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId,) = _get_struct_4i4db2i().unpack(str[start:end])
        self.signals.append(val1)
      _x = self
      start = end
      end += 44
      (_x.curve_flag, _x.microbus_pedal, _x.microbus_angle, _x.automatic_door, _x.signal_stop_line, _x.temporary_stop_line, _x.fusion_select, _x.steer_correction, _x.lookahead_ratio, _x.minimum_lookahead_distance, _x.lookahead_ratio_magn, _x.liesse.header.seq, _x.liesse.header.stamp.secs, _x.liesse.header.stamp.nsecs,) = _get_struct_i2h4bd3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.liesse.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.liesse.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.liesse.shift,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i4db2i = None
def _get_struct_4i4db2i():
    global _struct_4i4db2i
    if _struct_4i4db2i is None:
        _struct_4i4db2i = struct.Struct("<4i4db2i")
    return _struct_4i4db2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_i2h4bd3f3I = None
def _get_struct_i2h4bd3f3I():
    global _struct_i2h4bd3f3I
    if _struct_i2h4bd3f3I is None:
        _struct_i2h4bd3f3I = struct.Struct("<i2h4bd3f3I")
    return _struct_i2h4bd3f3I
_struct_If9i2dh2i2f = None
def _get_struct_If9i2dh2i2f():
    global _struct_If9i2dh2i2f
    if _struct_If9i2dh2i2f is None:
        _struct_If9i2dh2i2f = struct.Struct("<If9i2dh2i2f")
    return _struct_If9i2dh2i2f
